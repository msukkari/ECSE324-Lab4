
P:/G28_Lab4/vga.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 c8 0c 00 00 cc 0c 00 00 d0 0c 00 00     @...............
  30:	d4 0c 00 00 c4 0c 00 00 d8 0c 00 00 dc 0c 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0002e1 	bl	c60 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000dc4 	.word	0x00000dc4

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001200 	.word	0x00001200

00000124 <__cs3_heap_start_ptr>:
 124:	00001228 	.word	0x00001228

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001208 	.word	0x00001208
 170:	0000120b 	.word	0x0000120b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001208 	.word	0x00001208
 1bc:	00001208 	.word	0x00001208
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001208 	.word	0x00001208
 200:	00000000 	.word	0x00000000
 204:	00000d68 	.word	0x00000d68

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000d68 	.word	0x00000d68
 250:	0000120c 	.word	0x0000120c
 254:	00000dc8 	.word	0x00000dc8
 258:	00000000 	.word	0x00000000

0000025c <test_char>:
#include "./drivers/inc/vga.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/slider_switches.h"

void test_char()
{
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c;
	VGA_clear_charbuff_ASM();
 268:	eb00015d 	bl	7e4 <VGA_clear_charbuff_ASM>
	c=0;
 26c:	e3a03000 	mov	r3, #0
 270:	e54b300d 	strb	r3, [r11, #-13]
	for(y = 0; y <= 59; y++)
 274:	e3a03000 	mov	r3, #0
 278:	e50b300c 	str	r3, [r11, #-12]
 27c:	ea000013 	b	2d0 <test_char+0x74>
	{
		for(x = 0; x <= 79; x++) VGA_write_char_ASM(x,y,c++);
 280:	e3a03000 	mov	r3, #0
 284:	e50b3008 	str	r3, [r11, #-8]
 288:	ea00000a 	b	2b8 <test_char+0x5c>
 28c:	e55b300d 	ldrb	r3, [r11, #-13]
 290:	e55b200d 	ldrb	r2, [r11, #-13]
 294:	e2822001 	add	r2, r2, #1
 298:	e54b200d 	strb	r2, [r11, #-13]
 29c:	e51b0008 	ldr	r0, [r11, #-8]
 2a0:	e51b100c 	ldr	r1, [r11, #-12]
 2a4:	e1a02003 	mov	r2, r3
 2a8:	eb00015d 	bl	824 <VGA_write_char_ASM>
 2ac:	e51b3008 	ldr	r3, [r11, #-8]
 2b0:	e2833001 	add	r3, r3, #1
 2b4:	e50b3008 	str	r3, [r11, #-8]
 2b8:	e51b3008 	ldr	r3, [r11, #-8]
 2bc:	e353004f 	cmp	r3, #79	; 0x4f
 2c0:	dafffff1 	ble	28c <test_char+0x30>
{
	int x,y;
	char c;
	VGA_clear_charbuff_ASM();
	c=0;
	for(y = 0; y <= 59; y++)
 2c4:	e51b300c 	ldr	r3, [r11, #-12]
 2c8:	e2833001 	add	r3, r3, #1
 2cc:	e50b300c 	str	r3, [r11, #-12]
 2d0:	e51b300c 	ldr	r3, [r11, #-12]
 2d4:	e353003b 	cmp	r3, #59	; 0x3b
 2d8:	daffffe8 	ble	280 <test_char+0x24>
	{
		for(x = 0; x <= 79; x++) VGA_write_char_ASM(x,y,c++);
	}
}
 2dc:	e24bd004 	sub	sp, r11, #4
 2e0:	e8bd8800 	pop	{r11, pc}

000002e4 <test_clear>:

void test_clear()
{
 2e4:	e92d4800 	push	{r11, lr}
 2e8:	e28db004 	add	r11, sp, #4
 2ec:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c = 32;
 2f0:	e3a03020 	mov	r3, #32
 2f4:	e54b300d 	strb	r3, [r11, #-13]

	for(y = 0; y <= 59; y++)
 2f8:	e3a03000 	mov	r3, #0
 2fc:	e50b300c 	str	r3, [r11, #-12]
 300:	ea000010 	b	348 <test_clear+0x64>
	{
		for(x = 0; x <= 79; x++) VGA_write_char_ASM(x,y,c);
 304:	e3a03000 	mov	r3, #0
 308:	e50b3008 	str	r3, [r11, #-8]
 30c:	ea000007 	b	330 <test_clear+0x4c>
 310:	e55b300d 	ldrb	r3, [r11, #-13]
 314:	e51b0008 	ldr	r0, [r11, #-8]
 318:	e51b100c 	ldr	r1, [r11, #-12]
 31c:	e1a02003 	mov	r2, r3
 320:	eb00013f 	bl	824 <VGA_write_char_ASM>
 324:	e51b3008 	ldr	r3, [r11, #-8]
 328:	e2833001 	add	r3, r3, #1
 32c:	e50b3008 	str	r3, [r11, #-8]
 330:	e51b3008 	ldr	r3, [r11, #-8]
 334:	e353004f 	cmp	r3, #79	; 0x4f
 338:	dafffff4 	ble	310 <test_clear+0x2c>
void test_clear()
{
	int x,y;
	char c = 32;

	for(y = 0; y <= 59; y++)
 33c:	e51b300c 	ldr	r3, [r11, #-12]
 340:	e2833001 	add	r3, r3, #1
 344:	e50b300c 	str	r3, [r11, #-12]
 348:	e51b300c 	ldr	r3, [r11, #-12]
 34c:	e353003b 	cmp	r3, #59	; 0x3b
 350:	daffffeb 	ble	304 <test_clear+0x20>
	{
		for(x = 0; x <= 79; x++) VGA_write_char_ASM(x,y,c);
	}
}
 354:	e24bd004 	sub	sp, r11, #4
 358:	e8bd8800 	pop	{r11, pc}

0000035c <test_byte>:

void test_byte()
{
 35c:	e92d4800 	push	{r11, lr}
 360:	e28db004 	add	r11, sp, #4
 364:	e24dd010 	sub	sp, sp, #16
	int x, y;
	char c = 0;
 368:	e3a03000 	mov	r3, #0
 36c:	e54b300d 	strb	r3, [r11, #-13]

	for(y = 0; y <= 59; y++)
 370:	e3a03000 	mov	r3, #0
 374:	e50b300c 	str	r3, [r11, #-12]
 378:	ea000013 	b	3cc <test_byte+0x70>
	{
		for(x = 0; x <= 79; x+=3) VGA_write_byte_ASM(x, y, c++);
 37c:	e3a03000 	mov	r3, #0
 380:	e50b3008 	str	r3, [r11, #-8]
 384:	ea00000a 	b	3b4 <test_byte+0x58>
 388:	e55b300d 	ldrb	r3, [r11, #-13]
 38c:	e55b200d 	ldrb	r2, [r11, #-13]
 390:	e2822001 	add	r2, r2, #1
 394:	e54b200d 	strb	r2, [r11, #-13]
 398:	e51b0008 	ldr	r0, [r11, #-8]
 39c:	e51b100c 	ldr	r1, [r11, #-12]
 3a0:	e1a02003 	mov	r2, r3
 3a4:	eb00012b 	bl	858 <VGA_write_byte_ASM>
 3a8:	e51b3008 	ldr	r3, [r11, #-8]
 3ac:	e2833003 	add	r3, r3, #3
 3b0:	e50b3008 	str	r3, [r11, #-8]
 3b4:	e51b3008 	ldr	r3, [r11, #-8]
 3b8:	e353004f 	cmp	r3, #79	; 0x4f
 3bc:	dafffff1 	ble	388 <test_byte+0x2c>
void test_byte()
{
	int x, y;
	char c = 0;

	for(y = 0; y <= 59; y++)
 3c0:	e51b300c 	ldr	r3, [r11, #-12]
 3c4:	e2833001 	add	r3, r3, #1
 3c8:	e50b300c 	str	r3, [r11, #-12]
 3cc:	e51b300c 	ldr	r3, [r11, #-12]
 3d0:	e353003b 	cmp	r3, #59	; 0x3b
 3d4:	daffffe8 	ble	37c <test_byte+0x20>
	{
		for(x = 0; x <= 79; x+=3) VGA_write_byte_ASM(x, y, c++);
	}
}
 3d8:	e24bd004 	sub	sp, r11, #4
 3dc:	e8bd8800 	pop	{r11, pc}

000003e0 <test_pixel>:

void test_pixel()
{
 3e0:	e92d4800 	push	{r11, lr}
 3e4:	e28db004 	add	r11, sp, #4
 3e8:	e24dd010 	sub	sp, sp, #16
	int x, y;
	unsigned short colour = 0;
 3ec:	e3a03000 	mov	r3, #0
 3f0:	e14b30be 	strh	r3, [r11, #-14]

	for(y = 0; y <= 239; y++)
 3f4:	e3a03000 	mov	r3, #0
 3f8:	e50b300c 	str	r3, [r11, #-12]
 3fc:	ea000015 	b	458 <test_pixel+0x78>
	{
		for(x = 0; x <= 319; x++) VGA_draw_point_ASM(x, y, colour++);
 400:	e3a03000 	mov	r3, #0
 404:	e50b3008 	str	r3, [r11, #-8]
 408:	ea00000b 	b	43c <test_pixel+0x5c>
 40c:	e15b30be 	ldrh	r3, [r11, #-14]
 410:	e15b20be 	ldrh	r2, [r11, #-14]
 414:	e2822001 	add	r2, r2, #1
 418:	e14b20be 	strh	r2, [r11, #-14]
 41c:	e6bf3073 	sxth	r3, r3
 420:	e51b0008 	ldr	r0, [r11, #-8]
 424:	e51b100c 	ldr	r1, [r11, #-12]
 428:	e1a02003 	mov	r2, r3
 42c:	eb0000de 	bl	7ac <VGA_draw_point_ASM>
 430:	e51b3008 	ldr	r3, [r11, #-8]
 434:	e2833001 	add	r3, r3, #1
 438:	e50b3008 	str	r3, [r11, #-8]
 43c:	e51b2008 	ldr	r2, [r11, #-8]
 440:	e300313f 	movw	r3, #319	; 0x13f
 444:	e1520003 	cmp	r2, r3
 448:	daffffef 	ble	40c <test_pixel+0x2c>
void test_pixel()
{
	int x, y;
	unsigned short colour = 0;

	for(y = 0; y <= 239; y++)
 44c:	e51b300c 	ldr	r3, [r11, #-12]
 450:	e2833001 	add	r3, r3, #1
 454:	e50b300c 	str	r3, [r11, #-12]
 458:	e51b300c 	ldr	r3, [r11, #-12]
 45c:	e35300ef 	cmp	r3, #239	; 0xef
 460:	daffffe6 	ble	400 <test_pixel+0x20>
	{
		for(x = 0; x <= 319; x++) VGA_draw_point_ASM(x, y, colour++);
	}
}
 464:	e24bd004 	sub	sp, r11, #4
 468:	e8bd8800 	pop	{r11, pc}

0000046c <VGA>:

void VGA()
{
 46c:	e92d4800 	push	{r11, lr}
 470:	e28db004 	add	r11, sp, #4
 474:	e24dd018 	sub	sp, sp, #24
 478:	ea000000 	b	480 <VGA+0x14>
		if(pb0 && switches) test_byte();
		else if(pb0) test_char();
		else if(pb1) test_pixel();
		else if(pb2) VGA_clear_charbuff_ASM();
		else if(pb3) VGA_clear_pixelbuff_ASM();
	}
 47c:	e1a00000 	nop			; (mov r0, r0)

void VGA()
{
	while(1)
	{
		int pb = read_PB_edgecap_ASM();	
 480:	eb00008f 	bl	6c4 <read_PB_edgecap_ASM>
 484:	e50b0008 	str	r0, [r11, #-8]
		if(pb) PB_clear_edgecap_ASM(15);
 488:	e51b3008 	ldr	r3, [r11, #-8]
 48c:	e3530000 	cmp	r3, #0
 490:	0a000001 	beq	49c <VGA+0x30>
 494:	e3a0000f 	mov	r0, #15
 498:	eb000093 	bl	6ec <PB_clear_edgecap_ASM>
		int pb0 = pb & 1;
 49c:	e51b3008 	ldr	r3, [r11, #-8]
 4a0:	e2033001 	and	r3, r3, #1
 4a4:	e50b300c 	str	r3, [r11, #-12]
		int pb1 = pb & 2;
 4a8:	e51b3008 	ldr	r3, [r11, #-8]
 4ac:	e2033002 	and	r3, r3, #2
 4b0:	e50b3010 	str	r3, [r11, #-16]
		int pb2 = pb & 4;
 4b4:	e51b3008 	ldr	r3, [r11, #-8]
 4b8:	e2033004 	and	r3, r3, #4
 4bc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		int pb3 = pb & 8;
 4c0:	e51b3008 	ldr	r3, [r11, #-8]
 4c4:	e2033008 	and	r3, r3, #8
 4c8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8

		int switches = read_slider_switches_ASM();
 4cc:	eb0000a0 	bl	754 <read_slider_switches_ASM>
 4d0:	e50b001c 	str	r0, [r11, #-28]	; 0xffffffe4

		if(pb0 && switches) test_byte();
 4d4:	e51b300c 	ldr	r3, [r11, #-12]
 4d8:	e3530000 	cmp	r3, #0
 4dc:	0a000004 	beq	4f4 <VGA+0x88>
 4e0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 4e4:	e3530000 	cmp	r3, #0
 4e8:	0a000001 	beq	4f4 <VGA+0x88>
 4ec:	ebffff9a 	bl	35c <test_byte>
		else if(pb0) test_char();
		else if(pb1) test_pixel();
		else if(pb2) VGA_clear_charbuff_ASM();
		else if(pb3) VGA_clear_pixelbuff_ASM();
	}
 4f0:	eaffffe1 	b	47c <VGA+0x10>
		int pb3 = pb & 8;

		int switches = read_slider_switches_ASM();

		if(pb0 && switches) test_byte();
		else if(pb0) test_char();
 4f4:	e51b300c 	ldr	r3, [r11, #-12]
 4f8:	e3530000 	cmp	r3, #0
 4fc:	0a000001 	beq	508 <VGA+0x9c>
 500:	ebffff55 	bl	25c <test_char>
		else if(pb1) test_pixel();
		else if(pb2) VGA_clear_charbuff_ASM();
		else if(pb3) VGA_clear_pixelbuff_ASM();
	}
 504:	eaffffdc 	b	47c <VGA+0x10>

		int switches = read_slider_switches_ASM();

		if(pb0 && switches) test_byte();
		else if(pb0) test_char();
		else if(pb1) test_pixel();
 508:	e51b3010 	ldr	r3, [r11, #-16]
 50c:	e3530000 	cmp	r3, #0
 510:	0a000001 	beq	51c <VGA+0xb0>
 514:	ebffffb1 	bl	3e0 <test_pixel>
		else if(pb2) VGA_clear_charbuff_ASM();
		else if(pb3) VGA_clear_pixelbuff_ASM();
	}
 518:	eaffffd7 	b	47c <VGA+0x10>
		int switches = read_slider_switches_ASM();

		if(pb0 && switches) test_byte();
		else if(pb0) test_char();
		else if(pb1) test_pixel();
		else if(pb2) VGA_clear_charbuff_ASM();
 51c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 520:	e3530000 	cmp	r3, #0
 524:	0a000001 	beq	530 <VGA+0xc4>
 528:	eb0000ad 	bl	7e4 <VGA_clear_charbuff_ASM>
		else if(pb3) VGA_clear_pixelbuff_ASM();
	}
 52c:	eaffffd2 	b	47c <VGA+0x10>

		if(pb0 && switches) test_byte();
		else if(pb0) test_char();
		else if(pb1) test_pixel();
		else if(pb2) VGA_clear_charbuff_ASM();
		else if(pb3) VGA_clear_pixelbuff_ASM();
 530:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 534:	e3530000 	cmp	r3, #0
 538:	0affffcf 	beq	47c <VGA+0x10>
 53c:	eb00008a 	bl	76c <VGA_clear_pixelbuff_ASM>
	}
 540:	eaffffcd 	b	47c <VGA+0x10>

00000544 <keyboard>:
}

void keyboard()
{
 544:	e92d4800 	push	{r11, lr}
 548:	e28db004 	add	r11, sp, #4
 54c:	e24dd010 	sub	sp, sp, #16
	int x = 0, y = 0;
 550:	e3a03000 	mov	r3, #0
 554:	e50b3008 	str	r3, [r11, #-8]
 558:	e3a03000 	mov	r3, #0
 55c:	e50b300c 	str	r3, [r11, #-12]
 560:	ea000000 	b	568 <keyboard+0x24>
				x = 0;
				y++;
				if(y > 59) y = 0;
			}
		}
	}
 564:	e1a00000 	nop			; (mov r0, r0)
	int x = 0, y = 0;
	char input;

	while(1)
	{
		if(read_PS2_data_ASM(&input)) 
 568:	e24b300d 	sub	r3, r11, #13
 56c:	e1a00003 	mov	r0, r3
 570:	eb0000ce 	bl	8b0 <read_PS2_data_ASM>
 574:	e1a03000 	mov	r3, r0
 578:	e3530000 	cmp	r3, #0
 57c:	0afffff8 	beq	564 <keyboard+0x20>
		{
			VGA_write_byte_ASM(x, y, input);
 580:	e55b300d 	ldrb	r3, [r11, #-13]
 584:	e51b0008 	ldr	r0, [r11, #-8]
 588:	e51b100c 	ldr	r1, [r11, #-12]
 58c:	e1a02003 	mov	r2, r3
 590:	eb0000b0 	bl	858 <VGA_write_byte_ASM>
			x += 3;
 594:	e51b3008 	ldr	r3, [r11, #-8]
 598:	e2833003 	add	r3, r3, #3
 59c:	e50b3008 	str	r3, [r11, #-8]
			if(x > 79)
 5a0:	e51b3008 	ldr	r3, [r11, #-8]
 5a4:	e353004f 	cmp	r3, #79	; 0x4f
 5a8:	daffffed 	ble	564 <keyboard+0x20>
			{
				if(y == 59) VGA_clear_charbuff_ASM();
 5ac:	e51b300c 	ldr	r3, [r11, #-12]
 5b0:	e353003b 	cmp	r3, #59	; 0x3b
 5b4:	1a000000 	bne	5bc <keyboard+0x78>
 5b8:	eb000089 	bl	7e4 <VGA_clear_charbuff_ASM>
	
				x = 0;
 5bc:	e3a03000 	mov	r3, #0
 5c0:	e50b3008 	str	r3, [r11, #-8]
				y++;
 5c4:	e51b300c 	ldr	r3, [r11, #-12]
 5c8:	e2833001 	add	r3, r3, #1
 5cc:	e50b300c 	str	r3, [r11, #-12]
				if(y > 59) y = 0;
 5d0:	e51b300c 	ldr	r3, [r11, #-12]
 5d4:	e353003b 	cmp	r3, #59	; 0x3b
 5d8:	daffffe1 	ble	564 <keyboard+0x20>
 5dc:	e3a03000 	mov	r3, #0
 5e0:	e50b300c 	str	r3, [r11, #-12]
			}
		}
	}
 5e4:	eaffffde 	b	564 <keyboard+0x20>

000005e8 <audio>:
}

void audio() {
 5e8:	e92d4800 	push	{r11, lr}
 5ec:	e28db004 	add	r11, sp, #4
 5f0:	e24dd008 	sub	sp, sp, #8
	while(1)
	{
		int i = 0;	
 5f4:	e3a03000 	mov	r3, #0
 5f8:	e50b3008 	str	r3, [r11, #-8]
		for(i = 0; i < 240; i++) if(write_audio_data_ASM(0x00FFFFFF) == 0) i--;
 5fc:	e3a03000 	mov	r3, #0
 600:	e50b3008 	str	r3, [r11, #-8]
 604:	ea00000a 	b	634 <audio+0x4c>
 608:	e3e004ff 	mvn	r0, #-16777216	; 0xff000000
 60c:	eb0000b5 	bl	8e8 <write_audio_data_ASM>
 610:	e1a03000 	mov	r3, r0
 614:	e3530000 	cmp	r3, #0
 618:	1a000002 	bne	628 <audio+0x40>
 61c:	e51b3008 	ldr	r3, [r11, #-8]
 620:	e2433001 	sub	r3, r3, #1
 624:	e50b3008 	str	r3, [r11, #-8]
 628:	e51b3008 	ldr	r3, [r11, #-8]
 62c:	e2833001 	add	r3, r3, #1
 630:	e50b3008 	str	r3, [r11, #-8]
 634:	e51b3008 	ldr	r3, [r11, #-8]
 638:	e35300ef 	cmp	r3, #239	; 0xef
 63c:	dafffff1 	ble	608 <audio+0x20>
		for(i = 0; i < 240; i++) if(write_audio_data_ASM(0x00000000) == 0) i--;
 640:	e3a03000 	mov	r3, #0
 644:	e50b3008 	str	r3, [r11, #-8]
 648:	ea00000a 	b	678 <audio+0x90>
 64c:	e3a00000 	mov	r0, #0
 650:	eb0000a4 	bl	8e8 <write_audio_data_ASM>
 654:	e1a03000 	mov	r3, r0
 658:	e3530000 	cmp	r3, #0
 65c:	1a000002 	bne	66c <audio+0x84>
 660:	e51b3008 	ldr	r3, [r11, #-8]
 664:	e2433001 	sub	r3, r3, #1
 668:	e50b3008 	str	r3, [r11, #-8]
 66c:	e51b3008 	ldr	r3, [r11, #-8]
 670:	e2833001 	add	r3, r3, #1
 674:	e50b3008 	str	r3, [r11, #-8]
 678:	e51b3008 	ldr	r3, [r11, #-8]
 67c:	e35300ef 	cmp	r3, #239	; 0xef
 680:	dafffff1 	ble	64c <audio+0x64>
	}
 684:	eaffffda 	b	5f4 <audio+0xc>

00000688 <main>:
}

void main()
{
 688:	e92d4800 	push	{r11, lr}
 68c:	e28db004 	add	r11, sp, #4
	VGA();
 690:	ebffff75 	bl	46c <VGA>
	//keyboard();
	//audio();
}
 694:	e8bd8800 	pop	{r11, pc}

00000698 <read_PB_data_ASM>:

	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM

read_PB_data_ASM:
	PUSH {R1, LR}
 698:	e92d4002 	push	{r1, lr}
	LDR R1, =BT_DATA
 69c:	e59f10a4 	ldr	r1, [pc, #164]	; 748 <disable_PB_INT_ASM+0x20>
	LDR R0, [R1]
 6a0:	e5910000 	ldr	r0, [r1]
	POP {R1, LR}
 6a4:	e8bd4002 	pop	{r1, lr}
	BX LR
 6a8:	e12fff1e 	bx	lr

000006ac <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
	PUSH {R1, LR}
 6ac:	e92d4002 	push	{r1, lr}
	MOV R1, R0
 6b0:	e1a01000 	mov	r1, r0
	BL read_PB_data_ASM
 6b4:	ebfffff7 	bl	698 <read_PB_data_ASM>
	AND R0, R0, R1
 6b8:	e0000001 	and	r0, r0, r1
	POP {R1, LR}
 6bc:	e8bd4002 	pop	{r1, lr}
	BX LR
 6c0:	e12fff1e 	bx	lr

000006c4 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
	LDR R1, =EDGE_CAP
 6c4:	e59f1080 	ldr	r1, [pc, #128]	; 74c <disable_PB_INT_ASM+0x24>
	LDR R0, [R1]
 6c8:	e5910000 	ldr	r0, [r1]
	STR R0, [R1]
 6cc:	e5810000 	str	r0, [r1]
	BX LR
 6d0:	e12fff1e 	bx	lr

000006d4 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
	PUSH {R1, LR}
 6d4:	e92d4002 	push	{r1, lr}
	MOV R1, R0
 6d8:	e1a01000 	mov	r1, r0
	BL read_PB_edgecap_ASM
 6dc:	ebfffff8 	bl	6c4 <read_PB_edgecap_ASM>
	AND R0, R0, R1
 6e0:	e0000001 	and	r0, r0, r1
	POP {R1, LR}
 6e4:	e8bd4002 	pop	{r1, lr}
	BX LR
 6e8:	e12fff1e 	bx	lr

000006ec <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
	PUSH {LR, R1, R3}
 6ec:	e92d400a 	push	{r1, r3, lr}
	LDR R3, =EDGE_CAP
 6f0:	e59f3054 	ldr	r3, [pc, #84]	; 74c <disable_PB_INT_ASM+0x24>
	MVN R1, R0
 6f4:	e1e01000 	mvn	r1, r0
	BL read_PB_edgecap_ASM
 6f8:	ebfffff1 	bl	6c4 <read_PB_edgecap_ASM>
	AND R0, R1, R0
 6fc:	e0010000 	and	r0, r1, r0
	STR R0, [R3]
 700:	e5830000 	str	r0, [r3]
	POP {LR, R1, R3}
 704:	e8bd400a 	pop	{r1, r3, lr}
	BX LR
 708:	e12fff1e 	bx	lr

0000070c <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
	// Need to set a bit location (not specified) in this
	// register to be 1, register location is INRPT_MASK
	// there are 3 bits in mask and 4 buttons 
	PUSH {R1, LR}
 70c:	e92d4002 	push	{r1, lr}
	LDR R1, =INRPT_MASK
 710:	e59f1038 	ldr	r1, [pc, #56]	; 750 <disable_PB_INT_ASM+0x28>
	LDR R2, [R1]
 714:	e5912000 	ldr	r2, [r1]
	ORR R0, R0, R2
 718:	e1800002 	orr	r0, r0, r2
	STR R0, [R1]
 71c:	e5810000 	str	r0, [r1]
	POP {R1, LR}
 720:	e8bd4002 	pop	{r1, lr}
	BX LR
 724:	e12fff1e 	bx	lr

00000728 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
	// Need to set a bit location (not specified) in this 
	// register to be 0, register location is INRPT_MASK
	PUSH {R1, LR}
 728:	e92d4002 	push	{r1, lr}
	LDR R1, =INRPT_MASK
 72c:	e59f101c 	ldr	r1, [pc, #28]	; 750 <disable_PB_INT_ASM+0x28>
	LDR R2, [R1]
 730:	e5912000 	ldr	r2, [r1]
	MVN R0, R0
 734:	e1e00000 	mvn	r0, r0
	AND R0, R0, R2
 738:	e0000002 	and	r0, r0, r2
	STR R0, [R1]
 73c:	e5810000 	str	r0, [r1]
	POP {R1, LR}
 740:	e8bd4002 	pop	{r1, lr}
	BX LR
 744:	e12fff1e 	bx	lr
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM

read_PB_data_ASM:
	PUSH {R1, LR}
	LDR R1, =BT_DATA
 748:	ff200050 	.word	0xff200050
	AND R0, R0, R1
	POP {R1, LR}
	BX LR

read_PB_edgecap_ASM:
	LDR R1, =EDGE_CAP
 74c:	ff20005c 	.word	0xff20005c
enable_PB_INT_ASM:
	// Need to set a bit location (not specified) in this
	// register to be 1, register location is INRPT_MASK
	// there are 3 bits in mask and 4 buttons 
	PUSH {R1, LR}
	LDR R1, =INRPT_MASK
 750:	ff200058 	.word	0xff200058

00000754 <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	PUSH {R1} 
 754:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =SW_BASE
 758:	e59f1008 	ldr	r1, [pc, #8]	; 768 <read_slider_switches_ASM+0x14>
	LDR R0, [R1]
 75c:	e5910000 	ldr	r0, [r1]
	POP {R1}
 760:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 764:	e12fff1e 	bx	lr
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	PUSH {R1} 
	LDR R1, =SW_BASE
 768:	ff200040 	.word	0xff200040

0000076c <VGA_clear_pixelbuff_ASM>:
	.global VGA_write_char_ASM
	.global VGA_write_byte_ASM
	.global VGA_draw_point_ASM
		
VGA_clear_pixelbuff_ASM:
	PUSH {R4-R5}	
 76c:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 770:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_PIXEL_BUF_BASE
 774:	e3a03332 	mov	r3, #-939524096	; 0xc8000000

	MOV R0, #0
 778:	e3a00000 	mov	r0, #0

0000077c <PIXEL_LOOPX>:
PIXEL_LOOPX:
	MOV R1, #0
 77c:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0, LSL #1
 780:	e0834080 	add	r4, r3, r0, lsl #1

00000784 <PIXEL_LOOPY>:
PIXEL_LOOPY:
	ADD R5, R4, R1, LSL #10
 784:	e0845501 	add	r5, r4, r1, lsl #10
	
	STRH R2, [R5]
 788:	e1c520b0 	strh	r2, [r5]
	
	ADD R1, R1, #1
 78c:	e2811001 	add	r1, r1, #1
	CMP R1, #240
 790:	e35100f0 	cmp	r1, #240	; 0xf0
	BLT PIXEL_LOOPY
 794:	bafffffa 	blt	784 <PIXEL_LOOPY>
	
	ADD R0, R0, #1
 798:	e2800001 	add	r0, r0, #1
	CMP R0, #320
 79c:	e3500d05 	cmp	r0, #320	; 0x140
	BLT PIXEL_LOOPX
 7a0:	bafffff5 	blt	77c <PIXEL_LOOPX>

	POP {R4-R5}
 7a4:	e8bd0030 	pop	{r4, r5}
	BX LR
 7a8:	e12fff1e 	bx	lr

000007ac <VGA_draw_point_ASM>:

VGA_draw_point_ASM:
	LDR R3, =319
 7ac:	e59f30f4 	ldr	r3, [pc, #244]	; 8a8 <HEX_ASCII+0x10>
	CMP R0, #0
 7b0:	e3500000 	cmp	r0, #0
	BXLT LR
 7b4:	b12fff1e 	bxlt	lr
	CMP R1, #0
 7b8:	e3510000 	cmp	r1, #0
	BXLT LR
 7bc:	b12fff1e 	bxlt	lr
	CMP R0, R3
 7c0:	e1500003 	cmp	r0, r3
	BXGT LR
 7c4:	c12fff1e 	bxgt	lr
	CMP R1, #239
 7c8:	e35100ef 	cmp	r1, #239	; 0xef
	BXGT LR
 7cc:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_PIXEL_BUF_BASE
 7d0:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	ADD R3, R3, R0, LSL #1
 7d4:	e0833080 	add	r3, r3, r0, lsl #1
	ADD R3, R3, R1, LSL #10
 7d8:	e0833501 	add	r3, r3, r1, lsl #10
	STRH R2, [R3]
 7dc:	e1c320b0 	strh	r2, [r3]
	BX LR
 7e0:	e12fff1e 	bx	lr

000007e4 <VGA_clear_charbuff_ASM>:
	
VGA_clear_charbuff_ASM:
	PUSH {R4-R5}	
 7e4:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 7e8:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_CHAR_BUF_BASE
 7ec:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000

	MOV R0, #0
 7f0:	e3a00000 	mov	r0, #0

000007f4 <CHAR_LOOPX>:
CHAR_LOOPX:
	MOV R1, #0
 7f4:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0
 7f8:	e0834000 	add	r4, r3, r0

000007fc <CHAR_LOOPY>:
CHAR_LOOPY:
	ADD R5, R4, R1, LSL #7
 7fc:	e0845381 	add	r5, r4, r1, lsl #7
	
	STRB R2, [R5]
 800:	e5c52000 	strb	r2, [r5]
	
	ADD R1, R1, #1
 804:	e2811001 	add	r1, r1, #1
	CMP R1, #60
 808:	e351003c 	cmp	r1, #60	; 0x3c
	BLT CHAR_LOOPY
 80c:	bafffffa 	blt	7fc <CHAR_LOOPY>
	
	ADD R0, R0, #1
 810:	e2800001 	add	r0, r0, #1
	CMP R0, #80
 814:	e3500050 	cmp	r0, #80	; 0x50
	BLT CHAR_LOOPX
 818:	bafffff5 	blt	7f4 <CHAR_LOOPX>

	POP {R4-R5}
 81c:	e8bd0030 	pop	{r4, r5}
	BX LR
 820:	e12fff1e 	bx	lr

00000824 <VGA_write_char_ASM>:

VGA_write_char_ASM:
	CMP R0, #0
 824:	e3500000 	cmp	r0, #0
	BXLT LR
 828:	b12fff1e 	bxlt	lr
	CMP R1, #0
 82c:	e3510000 	cmp	r1, #0
	BXLT LR
 830:	b12fff1e 	bxlt	lr
	CMP R0, #80
 834:	e3500050 	cmp	r0, #80	; 0x50
	BXGE LR
 838:	a12fff1e 	bxge	lr
	CMP R1, #60
 83c:	e351003c 	cmp	r1, #60	; 0x3c
	BXGE LR
 840:	a12fff1e 	bxge	lr
	
	LDR R3, =VGA_CHAR_BUF_BASE
 844:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	ADD R3, R3, R0
 848:	e0833000 	add	r3, r3, r0
	ADD R3, R3, R1, LSL #7
 84c:	e0833381 	add	r3, r3, r1, lsl #7
	STRB R2, [R3]
 850:	e5c32000 	strb	r2, [r3]
	BX LR
 854:	e12fff1e 	bx	lr

00000858 <VGA_write_byte_ASM>:
	
	// R0 = x
	// R1 = y
	// R2 = character
VGA_write_byte_ASM:
	PUSH {LR, R1-R9}
 858:	e92d43fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	LDR R5, =HEX_ASCII
 85c:	e59f5048 	ldr	r5, [pc, #72]	; 8ac <HEX_ASCII+0x14>

	PUSH {R2}
 860:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
	LSR R2, R2, #4
 864:	e1a02222 	lsr	r2, r2, #4
	LDRB R2, [R5, R2]
 868:	e7d52002 	ldrb	r2, [r5, r2]
	BL VGA_write_char_ASM
 86c:	ebffffec 	bl	824 <VGA_write_char_ASM>
	POP {R2}
 870:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
	ADD R0, R0, #1
 874:	e2800001 	add	r0, r0, #1
	
	AND R2, R2, #15
 878:	e202200f 	and	r2, r2, #15
	LDRB R2, [R5, R2]
 87c:	e7d52002 	ldrb	r2, [r5, r2]
	BL VGA_write_char_ASM
 880:	ebffffe7 	bl	824 <VGA_write_char_ASM>
	ADD R0, R0, #1
 884:	e2800001 	add	r0, r0, #1

	MOV R2, #32
 888:	e3a02020 	mov	r2, #32
	BL VGA_write_char_ASM
 88c:	ebffffe4 	bl	824 <VGA_write_char_ASM>

	POP {LR, R1-R9}
 890:	e8bd43fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	BX LR
 894:	e12fff1e 	bx	lr

00000898 <HEX_ASCII>:
 898:	33323130 	.word	0x33323130
 89c:	37363534 	.word	0x37363534
 8a0:	42413938 	.word	0x42413938
 8a4:	46454443 	.word	0x46454443

	POP {R4-R5}
	BX LR

VGA_draw_point_ASM:
	LDR R3, =319
 8a8:	0000013f 	.word	0x0000013f
	// R0 = x
	// R1 = y
	// R2 = character
VGA_write_byte_ASM:
	PUSH {LR, R1-R9}
	LDR R5, =HEX_ASCII
 8ac:	00000898 	.word	0x00000898

000008b0 <read_PS2_data_ASM>:

	.equ PS2_DATA, 0xFF200100
	.global read_PS2_data_ASM

read_PS2_data_ASM:
			PUSH {LR, R1-R9}
 8b0:	e92d43fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
			LDR R1, =PS2_DATA
 8b4:	e59f1028 	ldr	r1, [pc, #40]	; 8e4 <DONE+0x8>
			LDR R5, [R1]
 8b8:	e5915000 	ldr	r5, [r1]
			LDR R2, =32768
 8bc:	e3a02902 	mov	r2, #32768	; 0x8000
			TST R5, R2
 8c0:	e1150002 	tst	r5, r2
			BEQ INVALID
 8c4:	0a000003 	beq	8d8 <INVALID>
			LDRB R4, [R1]
 8c8:	e5d14000 	ldrb	r4, [r1]
			STRB R4, [R0]
 8cc:	e5c04000 	strb	r4, [r0]
			MOV R0, #1
 8d0:	e3a00001 	mov	r0, #1
			B DONE
 8d4:	ea000000 	b	8dc <DONE>

000008d8 <INVALID>:

INVALID:	MOV R0, #0
 8d8:	e3a00000 	mov	r0, #0

000008dc <DONE>:
DONE:		POP {LR, R1-R9}
 8dc:	e8bd43fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
			BX LR
 8e0:	e12fff1e 	bx	lr
	.equ PS2_DATA, 0xFF200100
	.global read_PS2_data_ASM

read_PS2_data_ASM:
			PUSH {LR, R1-R9}
			LDR R1, =PS2_DATA
 8e4:	ff200100 	.word	0xff200100

000008e8 <write_audio_data_ASM>:
	.equ LEFT_DATA,	0xFF203048
	.equ RIGHT_DATA,	0xFF20304C


write_audio_data_ASM:
		PUSH {LR, R1-R9}
 8e8:	e92d43fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
		LDR R2, =FIFO
 8ec:	e59f2034 	ldr	r2, [pc, #52]	; 928 <END+0x4>

		LDRB R5, [R2, #2]
 8f0:	e5d25002 	ldrb	r5, [r2, #2]
		LDRB R6, [R2, #3] 
 8f4:	e5d26003 	ldrb	r6, [r2, #3]

		CMP R5,#1      
 8f8:	e3550001 	cmp	r5, #1
        BLT FULL           
 8fc:	ba000007 	blt	920 <FULL>
        CMP R6,#1             
 900:	e3560001 	cmp	r6, #1
        BLT FULL           
 904:	ba000005 	blt	920 <FULL>

		LDR R7,=LEFT_DATA		
 908:	e59f701c 	ldr	r7, [pc, #28]	; 92c <END+0x8>
        LDR R8,=RIGHT_DATA		
 90c:	e59f801c 	ldr	r8, [pc, #28]	; 930 <END+0xc>
        STR R0,[R7]			
 910:	e5870000 	str	r0, [r7]
        STR R0,[R8]			
 914:	e5880000 	str	r0, [r8]
        MOV R0, #1			
 918:	e3a00001 	mov	r0, #1
		B END
 91c:	ea000000 	b	924 <END>

00000920 <FULL>:
		 
FULL:	MOV R0, #0
 920:	e3a00000 	mov	r0, #0

00000924 <END>:
END:	BX LR
 924:	e12fff1e 	bx	lr
	.equ RIGHT_DATA,	0xFF20304C


write_audio_data_ASM:
		PUSH {LR, R1-R9}
		LDR R2, =FIFO
 928:	ff203044 	.word	0xff203044
		CMP R5,#1      
        BLT FULL           
        CMP R6,#1             
        BLT FULL           

		LDR R7,=LEFT_DATA		
 92c:	ff203048 	.word	0xff203048
        LDR R8,=RIGHT_DATA		
 930:	ff20304c 	.word	0xff20304c

00000934 <atexit>:
 934:	e1a01000 	mov	r1, r0
 938:	e3a00000 	mov	r0, #0
 93c:	e92d4008 	push	{r3, lr}
 940:	e1a02000 	mov	r2, r0
 944:	e1a03000 	mov	r3, r0
 948:	eb00000e 	bl	988 <__register_exitproc>
 94c:	e8bd4008 	pop	{r3, lr}
 950:	e12fff1e 	bx	lr

00000954 <exit>:
 954:	e92d4008 	push	{r3, lr}
 958:	e3a01000 	mov	r1, #0
 95c:	e1a04000 	mov	r4, r0
 960:	eb000045 	bl	a7c <__call_exitprocs>
 964:	e59f3018 	ldr	r3, [pc, #24]	; 984 <exit+0x30>
 968:	e5930000 	ldr	r0, [r3]
 96c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 970:	e3530000 	cmp	r3, #0
 974:	11a0e00f 	movne	lr, pc
 978:	112fff13 	bxne	r3
 97c:	e1a00004 	mov	r0, r4
 980:	eb0000c9 	bl	cac <_exit>
 984:	00000d6c 	.word	0x00000d6c

00000988 <__register_exitproc>:
 988:	e59fc0e4 	ldr	r12, [pc, #228]	; a74 <__register_exitproc+0xec>
 98c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 990:	e59c4000 	ldr	r4, [r12]
 994:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 998:	e35c0000 	cmp	r12, #0
 99c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 9a0:	e59c5004 	ldr	r5, [r12, #4]
 9a4:	0584c148 	streq	r12, [r4, #328]	; 0x148
 9a8:	e355001f 	cmp	r5, #31
 9ac:	e24dd010 	sub	sp, sp, #16
 9b0:	e1a06000 	mov	r6, r0
 9b4:	da000015 	ble	a10 <__register_exitproc+0x88>
 9b8:	e59f00b8 	ldr	r0, [pc, #184]	; a78 <__register_exitproc+0xf0>
 9bc:	e3500000 	cmp	r0, #0
 9c0:	1a000001 	bne	9cc <__register_exitproc+0x44>
 9c4:	e3e00000 	mvn	r0, #0
 9c8:	ea000018 	b	a30 <__register_exitproc+0xa8>
 9cc:	e3a00e19 	mov	r0, #400	; 0x190
 9d0:	e58d100c 	str	r1, [sp, #12]
 9d4:	e58d2008 	str	r2, [sp, #8]
 9d8:	e58d3004 	str	r3, [sp, #4]
 9dc:	e320f000 	nop	{0}
 9e0:	e250c000 	subs	r12, r0, #0
 9e4:	e59d100c 	ldr	r1, [sp, #12]
 9e8:	e59d2008 	ldr	r2, [sp, #8]
 9ec:	e59d3004 	ldr	r3, [sp, #4]
 9f0:	0afffff3 	beq	9c4 <__register_exitproc+0x3c>
 9f4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 9f8:	e3a00000 	mov	r0, #0
 9fc:	e58c0004 	str	r0, [r12, #4]
 a00:	e58c5000 	str	r5, [r12]
 a04:	e584c148 	str	r12, [r4, #328]	; 0x148
 a08:	e58c0188 	str	r0, [r12, #392]	; 0x188
 a0c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 a10:	e3560000 	cmp	r6, #0
 a14:	e59c4004 	ldr	r4, [r12, #4]
 a18:	1a000007 	bne	a3c <__register_exitproc+0xb4>
 a1c:	e2843002 	add	r3, r4, #2
 a20:	e2844001 	add	r4, r4, #1
 a24:	e78c1103 	str	r1, [r12, r3, lsl #2]
 a28:	e58c4004 	str	r4, [r12, #4]
 a2c:	e3a00000 	mov	r0, #0
 a30:	e28dd010 	add	sp, sp, #16
 a34:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 a38:	e12fff1e 	bx	lr
 a3c:	e3a00001 	mov	r0, #1
 a40:	e1a00410 	lsl	r0, r0, r4
 a44:	e08c8104 	add	r8, r12, r4, lsl #2
 a48:	e3560002 	cmp	r6, #2
 a4c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 a50:	e5883108 	str	r3, [r8, #264]	; 0x108
 a54:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 a58:	e1877000 	orr	r7, r7, r0
 a5c:	01830000 	orreq	r0, r3, r0
 a60:	e1a05008 	mov	r5, r8
 a64:	e5882088 	str	r2, [r8, #136]	; 0x88
 a68:	e58c7188 	str	r7, [r12, #392]	; 0x188
 a6c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 a70:	eaffffe9 	b	a1c <__register_exitproc+0x94>
 a74:	00000d6c 	.word	0x00000d6c
 a78:	00000000 	.word	0x00000000

00000a7c <__call_exitprocs>:
 a7c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a80:	e59f3168 	ldr	r3, [pc, #360]	; bf0 <__call_exitprocs+0x174>
 a84:	e5933000 	ldr	r3, [r3]
 a88:	e24dd014 	sub	sp, sp, #20
 a8c:	e58d3004 	str	r3, [sp, #4]
 a90:	e2833f52 	add	r3, r3, #328	; 0x148
 a94:	e58d0008 	str	r0, [sp, #8]
 a98:	e58d300c 	str	r3, [sp, #12]
 a9c:	e1a07001 	mov	r7, r1
 aa0:	e3a08001 	mov	r8, #1
 aa4:	e59d3004 	ldr	r3, [sp, #4]
 aa8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 aac:	e3560000 	cmp	r6, #0
 ab0:	e59db00c 	ldr	r11, [sp, #12]
 ab4:	0a000033 	beq	b88 <__call_exitprocs+0x10c>
 ab8:	e5965004 	ldr	r5, [r6, #4]
 abc:	e2554001 	subs	r4, r5, #1
 ac0:	5286a088 	addpl	r10, r6, #136	; 0x88
 ac4:	5285501f 	addpl	r5, r5, #31
 ac8:	508a5105 	addpl	r5, r10, r5, lsl #2
 acc:	5a000007 	bpl	af0 <__call_exitprocs+0x74>
 ad0:	ea000029 	b	b7c <__call_exitprocs+0x100>
 ad4:	e5953000 	ldr	r3, [r5]
 ad8:	e1530007 	cmp	r3, r7
 adc:	0a000005 	beq	af8 <__call_exitprocs+0x7c>
 ae0:	e2444001 	sub	r4, r4, #1
 ae4:	e3740001 	cmn	r4, #1
 ae8:	e2455004 	sub	r5, r5, #4
 aec:	0a000022 	beq	b7c <__call_exitprocs+0x100>
 af0:	e3570000 	cmp	r7, #0
 af4:	1afffff6 	bne	ad4 <__call_exitprocs+0x58>
 af8:	e5963004 	ldr	r3, [r6, #4]
 afc:	e06a2005 	rsb	r2, r10, r5
 b00:	e2433001 	sub	r3, r3, #1
 b04:	e0862002 	add	r2, r6, r2
 b08:	e1530004 	cmp	r3, r4
 b0c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 b10:	13a01000 	movne	r1, #0
 b14:	05864004 	streq	r4, [r6, #4]
 b18:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 b1c:	e3530000 	cmp	r3, #0
 b20:	0affffee 	beq	ae0 <__call_exitprocs+0x64>
 b24:	e1a02418 	lsl	r2, r8, r4
 b28:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 b2c:	e1120001 	tst	r2, r1
 b30:	e5969004 	ldr	r9, [r6, #4]
 b34:	0a000016 	beq	b94 <__call_exitprocs+0x118>
 b38:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 b3c:	e1120001 	tst	r2, r1
 b40:	1a000016 	bne	ba0 <__call_exitprocs+0x124>
 b44:	e59d0008 	ldr	r0, [sp, #8]
 b48:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 b4c:	e1a0e00f 	mov	lr, pc
 b50:	e12fff13 	bx	r3
 b54:	e5963004 	ldr	r3, [r6, #4]
 b58:	e1530009 	cmp	r3, r9
 b5c:	1affffd0 	bne	aa4 <__call_exitprocs+0x28>
 b60:	e59b3000 	ldr	r3, [r11]
 b64:	e1530006 	cmp	r3, r6
 b68:	1affffcd 	bne	aa4 <__call_exitprocs+0x28>
 b6c:	e2444001 	sub	r4, r4, #1
 b70:	e3740001 	cmn	r4, #1
 b74:	e2455004 	sub	r5, r5, #4
 b78:	1affffdc 	bne	af0 <__call_exitprocs+0x74>
 b7c:	e59f1070 	ldr	r1, [pc, #112]	; bf4 <__call_exitprocs+0x178>
 b80:	e3510000 	cmp	r1, #0
 b84:	1a000009 	bne	bb0 <__call_exitprocs+0x134>
 b88:	e28dd014 	add	sp, sp, #20
 b8c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 b90:	e12fff1e 	bx	lr
 b94:	e1a0e00f 	mov	lr, pc
 b98:	e12fff13 	bx	r3
 b9c:	eaffffec 	b	b54 <__call_exitprocs+0xd8>
 ba0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 ba4:	e1a0e00f 	mov	lr, pc
 ba8:	e12fff13 	bx	r3
 bac:	eaffffe8 	b	b54 <__call_exitprocs+0xd8>
 bb0:	e5963004 	ldr	r3, [r6, #4]
 bb4:	e3530000 	cmp	r3, #0
 bb8:	e5963000 	ldr	r3, [r6]
 bbc:	1a000008 	bne	be4 <__call_exitprocs+0x168>
 bc0:	e3530000 	cmp	r3, #0
 bc4:	0a000006 	beq	be4 <__call_exitprocs+0x168>
 bc8:	e1a00006 	mov	r0, r6
 bcc:	e58b3000 	str	r3, [r11]
 bd0:	e320f000 	nop	{0}
 bd4:	e59b6000 	ldr	r6, [r11]
 bd8:	e3560000 	cmp	r6, #0
 bdc:	1affffb5 	bne	ab8 <__call_exitprocs+0x3c>
 be0:	eaffffe8 	b	b88 <__call_exitprocs+0x10c>
 be4:	e1a0b006 	mov	r11, r6
 be8:	e1a06003 	mov	r6, r3
 bec:	eafffff9 	b	bd8 <__call_exitprocs+0x15c>
 bf0:	00000d6c 	.word	0x00000d6c
 bf4:	00000000 	.word	0x00000000

00000bf8 <register_fini>:
 bf8:	e92d4008 	push	{r3, lr}
 bfc:	e59f3010 	ldr	r3, [pc, #16]	; c14 <register_fini+0x1c>
 c00:	e3530000 	cmp	r3, #0
 c04:	159f000c 	ldrne	r0, [pc, #12]	; c18 <register_fini+0x20>
 c08:	1bffff49 	blne	934 <atexit>
 c0c:	e8bd4008 	pop	{r3, lr}
 c10:	e12fff1e 	bx	lr
 c14:	00000d94 	.word	0x00000d94
 c18:	00000c1c 	.word	0x00000c1c

00000c1c <__libc_fini_array>:
 c1c:	e92d4038 	push	{r3, r4, r5, lr}
 c20:	e59f5030 	ldr	r5, [pc, #48]	; c58 <__libc_fini_array+0x3c>
 c24:	e59f4030 	ldr	r4, [pc, #48]	; c5c <__libc_fini_array+0x40>
 c28:	e0654004 	rsb	r4, r5, r4
 c2c:	e1b04144 	asrs	r4, r4, #2
 c30:	10855104 	addne	r5, r5, r4, lsl #2
 c34:	0a000004 	beq	c4c <__libc_fini_array+0x30>
 c38:	e5353004 	ldr	r3, [r5, #-4]!
 c3c:	e1a0e00f 	mov	lr, pc
 c40:	e12fff13 	bx	r3
 c44:	e2544001 	subs	r4, r4, #1
 c48:	1afffffa 	bne	c38 <__libc_fini_array+0x1c>
 c4c:	eb000050 	bl	d94 <__libc_fini>
 c50:	e8bd4038 	pop	{r3, r4, r5, lr}
 c54:	e12fff1e 	bx	lr
 c58:	00000dac 	.word	0x00000dac
 c5c:	00000db0 	.word	0x00000db0

00000c60 <__cs3_premain>:
 c60:	e92d4008 	push	{r3, lr}
 c64:	eb00001d 	bl	ce0 <__libc_init_array>
 c68:	e59f3030 	ldr	r3, [pc, #48]	; ca0 <__cs3_premain+0x40>
 c6c:	e3530000 	cmp	r3, #0
 c70:	15930000 	ldrne	r0, [r3]
 c74:	01a00003 	moveq	r0, r3
 c78:	e59f3024 	ldr	r3, [pc, #36]	; ca4 <__cs3_premain+0x44>
 c7c:	e3530000 	cmp	r3, #0
 c80:	15931000 	ldrne	r1, [r3]
 c84:	01a01003 	moveq	r1, r3
 c88:	e3a02000 	mov	r2, #0
 c8c:	ebfffe7d 	bl	688 <main>
 c90:	e59f3010 	ldr	r3, [pc, #16]	; ca8 <__cs3_premain+0x48>
 c94:	e3530000 	cmp	r3, #0
 c98:	1bffff2d 	blne	954 <exit>
 c9c:	eafffffe 	b	c9c <__cs3_premain+0x3c>
	...
 ca8:	00000954 	.word	0x00000954

00000cac <_exit>:
 cac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 cb0:	e3a00018 	mov	r0, #24
 cb4:	e59f1004 	ldr	r1, [pc, #4]	; cc0 <_exit+0x14>
 cb8:	ef123456 	svc	0x00123456
 cbc:	eafffffe 	b	cbc <_exit+0x10>
 cc0:	00020026 	.word	0x00020026

00000cc4 <__cs3_isr_interrupt>:
 cc4:	eafffffe 	b	cc4 <__cs3_isr_interrupt>

00000cc8 <__cs3_isr_undef>:
 cc8:	eafffffe 	b	cc8 <__cs3_isr_undef>

00000ccc <__cs3_isr_swi>:
 ccc:	eafffffe 	b	ccc <__cs3_isr_swi>

00000cd0 <__cs3_isr_pabort>:
 cd0:	eafffffe 	b	cd0 <__cs3_isr_pabort>

00000cd4 <__cs3_isr_dabort>:
 cd4:	eafffffe 	b	cd4 <__cs3_isr_dabort>

00000cd8 <__cs3_isr_irq>:
 cd8:	eafffffe 	b	cd8 <__cs3_isr_irq>

00000cdc <__cs3_isr_fiq>:
 cdc:	eafffffe 	b	cdc <__cs3_isr_fiq>

00000ce0 <__libc_init_array>:
 ce0:	e92d4070 	push	{r4, r5, r6, lr}
 ce4:	e59f506c 	ldr	r5, [pc, #108]	; d58 <__libc_init_array+0x78>
 ce8:	e59f606c 	ldr	r6, [pc, #108]	; d5c <__libc_init_array+0x7c>
 cec:	e0656006 	rsb	r6, r5, r6
 cf0:	e1b06146 	asrs	r6, r6, #2
 cf4:	12455004 	subne	r5, r5, #4
 cf8:	13a04000 	movne	r4, #0
 cfc:	0a000005 	beq	d18 <__libc_init_array+0x38>
 d00:	e5b53004 	ldr	r3, [r5, #4]!
 d04:	e2844001 	add	r4, r4, #1
 d08:	e1a0e00f 	mov	lr, pc
 d0c:	e12fff13 	bx	r3
 d10:	e1560004 	cmp	r6, r4
 d14:	1afffff9 	bne	d00 <__libc_init_array+0x20>
 d18:	e59f5040 	ldr	r5, [pc, #64]	; d60 <__libc_init_array+0x80>
 d1c:	e59f6040 	ldr	r6, [pc, #64]	; d64 <__libc_init_array+0x84>
 d20:	e0656006 	rsb	r6, r5, r6
 d24:	eb000012 	bl	d74 <_init>
 d28:	e1b06146 	asrs	r6, r6, #2
 d2c:	12455004 	subne	r5, r5, #4
 d30:	13a04000 	movne	r4, #0
 d34:	0a000005 	beq	d50 <__libc_init_array+0x70>
 d38:	e5b53004 	ldr	r3, [r5, #4]!
 d3c:	e2844001 	add	r4, r4, #1
 d40:	e1a0e00f 	mov	lr, pc
 d44:	e12fff13 	bx	r3
 d48:	e1560004 	cmp	r6, r4
 d4c:	1afffff9 	bne	d38 <__libc_init_array+0x58>
 d50:	e8bd4070 	pop	{r4, r5, r6, lr}
 d54:	e12fff1e 	bx	lr
 d58:	00000d8c 	.word	0x00000d8c
 d5c:	00000d8c 	.word	0x00000d8c
 d60:	00000d8c 	.word	0x00000d8c
 d64:	00000d94 	.word	0x00000d94

Disassembly of section .rodata:

00000d6c <_global_impure_ptr>:
 d6c:	00000dd8 00000043                       ....C...

00000d74 <_init>:
 d74:	e1a0c00d 	mov	r12, sp
 d78:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 d7c:	e24cb004 	sub	r11, r12, #4
 d80:	e24bd028 	sub	sp, r11, #40	; 0x28
 d84:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 d88:	e12fff1e 	bx	lr

00000d8c <__init_array_start>:
 d8c:	00000bf8 	.word	0x00000bf8

00000d90 <__frame_dummy_init_array_entry>:
 d90:	00000208                                ....

00000d94 <__libc_fini>:
 d94:	e1a0c00d 	mov	r12, sp
 d98:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 d9c:	e24cb004 	sub	r11, r12, #4
 da0:	e24bd028 	sub	sp, r11, #40	; 0x28
 da4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 da8:	e12fff1e 	bx	lr

00000dac <__fini_array_start>:
 dac:	000001c4 	.word	0x000001c4

00000db0 <__cs3_regions>:
	...
 dbc:	00001208 	.word	0x00001208
 dc0:	00000020 	.word	0x00000020

00000dc4 <__cs3_regions_end>:
 dc4:	00000000 	.word	0x00000000
