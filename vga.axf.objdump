
P:/G28_Lab4/vga.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 d4 0a 00 00 d8 0a 00 00 dc 0a 00 00     @...............
  30:	e0 0a 00 00 d0 0a 00 00 e4 0a 00 00 e8 0a 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000264 	bl	a6c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000bd0 	.word	0x00000bd0

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001008 	.word	0x00001008

00000124 <__cs3_heap_start_ptr>:
 124:	00001030 	.word	0x00001030

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001010 	.word	0x00001010
 170:	00001013 	.word	0x00001013
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001010 	.word	0x00001010
 1bc:	00001010 	.word	0x00001010
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001010 	.word	0x00001010
 200:	00000000 	.word	0x00000000
 204:	00000b74 	.word	0x00000b74

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000b74 	.word	0x00000b74
 250:	00001014 	.word	0x00001014
 254:	00000bd0 	.word	0x00000bd0
 258:	00000000 	.word	0x00000000

0000025c <test_char>:
#include "./drivers/inc/vga.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/slider_switches.h"

void test_char()
{
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c;

	for(y = 0; y <= 59; y++)
 268:	e3a03000 	mov	r3, #0
 26c:	e50b300c 	str	r3, [r11, #-12]
 270:	ea000013 	b	2c4 <test_char+0x68>
	{
		for(x = 0; x <= 79; x++) VGA_write_char_ASM(x,y,c++);
 274:	e3a03000 	mov	r3, #0
 278:	e50b3008 	str	r3, [r11, #-8]
 27c:	ea00000a 	b	2ac <test_char+0x50>
 280:	e55b300d 	ldrb	r3, [r11, #-13]
 284:	e55b200d 	ldrb	r2, [r11, #-13]
 288:	e2822001 	add	r2, r2, #1
 28c:	e54b200d 	strb	r2, [r11, #-13]
 290:	e51b0008 	ldr	r0, [r11, #-8]
 294:	e51b100c 	ldr	r1, [r11, #-12]
 298:	e1a02003 	mov	r2, r3
 29c:	eb000102 	bl	6ac <VGA_write_char_ASM>
 2a0:	e51b3008 	ldr	r3, [r11, #-8]
 2a4:	e2833001 	add	r3, r3, #1
 2a8:	e50b3008 	str	r3, [r11, #-8]
 2ac:	e51b3008 	ldr	r3, [r11, #-8]
 2b0:	e353004f 	cmp	r3, #79	; 0x4f
 2b4:	dafffff1 	ble	280 <test_char+0x24>
void test_char()
{
	int x,y;
	char c;

	for(y = 0; y <= 59; y++)
 2b8:	e51b300c 	ldr	r3, [r11, #-12]
 2bc:	e2833001 	add	r3, r3, #1
 2c0:	e50b300c 	str	r3, [r11, #-12]
 2c4:	e51b300c 	ldr	r3, [r11, #-12]
 2c8:	e353003b 	cmp	r3, #59	; 0x3b
 2cc:	daffffe8 	ble	274 <test_char+0x18>
	{
		for(x = 0; x <= 79; x++) VGA_write_char_ASM(x,y,c++);
	}
}
 2d0:	e24bd004 	sub	sp, r11, #4
 2d4:	e8bd8800 	pop	{r11, pc}

000002d8 <test_clear>:

void test_clear()
{
 2d8:	e92d4800 	push	{r11, lr}
 2dc:	e28db004 	add	r11, sp, #4
 2e0:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c = 32;
 2e4:	e3a03020 	mov	r3, #32
 2e8:	e54b300d 	strb	r3, [r11, #-13]

	for(y = 0; y <= 59; y++)
 2ec:	e3a03000 	mov	r3, #0
 2f0:	e50b300c 	str	r3, [r11, #-12]
 2f4:	ea000010 	b	33c <test_clear+0x64>
	{
		for(x = 0; x <= 79; x++) VGA_write_char_ASM(x,y,c);
 2f8:	e3a03000 	mov	r3, #0
 2fc:	e50b3008 	str	r3, [r11, #-8]
 300:	ea000007 	b	324 <test_clear+0x4c>
 304:	e55b300d 	ldrb	r3, [r11, #-13]
 308:	e51b0008 	ldr	r0, [r11, #-8]
 30c:	e51b100c 	ldr	r1, [r11, #-12]
 310:	e1a02003 	mov	r2, r3
 314:	eb0000e4 	bl	6ac <VGA_write_char_ASM>
 318:	e51b3008 	ldr	r3, [r11, #-8]
 31c:	e2833001 	add	r3, r3, #1
 320:	e50b3008 	str	r3, [r11, #-8]
 324:	e51b3008 	ldr	r3, [r11, #-8]
 328:	e353004f 	cmp	r3, #79	; 0x4f
 32c:	dafffff4 	ble	304 <test_clear+0x2c>
void test_clear()
{
	int x,y;
	char c = 32;

	for(y = 0; y <= 59; y++)
 330:	e51b300c 	ldr	r3, [r11, #-12]
 334:	e2833001 	add	r3, r3, #1
 338:	e50b300c 	str	r3, [r11, #-12]
 33c:	e51b300c 	ldr	r3, [r11, #-12]
 340:	e353003b 	cmp	r3, #59	; 0x3b
 344:	daffffeb 	ble	2f8 <test_clear+0x20>
	{
		for(x = 0; x <= 79; x++) VGA_write_char_ASM(x,y,c);
	}
}
 348:	e24bd004 	sub	sp, r11, #4
 34c:	e8bd8800 	pop	{r11, pc}

00000350 <test_byte>:

void test_byte()
{
 350:	e92d4800 	push	{r11, lr}
 354:	e28db004 	add	r11, sp, #4
 358:	e24dd010 	sub	sp, sp, #16
	int x, y;
	char c = 0;
 35c:	e3a03000 	mov	r3, #0
 360:	e54b300d 	strb	r3, [r11, #-13]

	for(y = 0; y <= 59; y++)
 364:	e3a03000 	mov	r3, #0
 368:	e50b300c 	str	r3, [r11, #-12]
 36c:	ea000013 	b	3c0 <test_byte+0x70>
	{
		for(x = 0; x <= 79; x+=3) VGA_write_byte_ASM(x, y, c++);
 370:	e3a03000 	mov	r3, #0
 374:	e50b3008 	str	r3, [r11, #-8]
 378:	ea00000a 	b	3a8 <test_byte+0x58>
 37c:	e55b300d 	ldrb	r3, [r11, #-13]
 380:	e55b200d 	ldrb	r2, [r11, #-13]
 384:	e2822001 	add	r2, r2, #1
 388:	e54b200d 	strb	r2, [r11, #-13]
 38c:	e51b0008 	ldr	r0, [r11, #-8]
 390:	e51b100c 	ldr	r1, [r11, #-12]
 394:	e1a02003 	mov	r2, r3
 398:	eb0000d0 	bl	6e0 <VGA_write_byte_ASM>
 39c:	e51b3008 	ldr	r3, [r11, #-8]
 3a0:	e2833003 	add	r3, r3, #3
 3a4:	e50b3008 	str	r3, [r11, #-8]
 3a8:	e51b3008 	ldr	r3, [r11, #-8]
 3ac:	e353004f 	cmp	r3, #79	; 0x4f
 3b0:	dafffff1 	ble	37c <test_byte+0x2c>
void test_byte()
{
	int x, y;
	char c = 0;

	for(y = 0; y <= 59; y++)
 3b4:	e51b300c 	ldr	r3, [r11, #-12]
 3b8:	e2833001 	add	r3, r3, #1
 3bc:	e50b300c 	str	r3, [r11, #-12]
 3c0:	e51b300c 	ldr	r3, [r11, #-12]
 3c4:	e353003b 	cmp	r3, #59	; 0x3b
 3c8:	daffffe8 	ble	370 <test_byte+0x20>
	{
		for(x = 0; x <= 79; x+=3) VGA_write_byte_ASM(x, y, c++);
	}
}
 3cc:	e24bd004 	sub	sp, r11, #4
 3d0:	e8bd8800 	pop	{r11, pc}

000003d4 <test_pixel>:

void test_pixel()
{
 3d4:	e92d4800 	push	{r11, lr}
 3d8:	e28db004 	add	r11, sp, #4
 3dc:	e24dd010 	sub	sp, sp, #16
	int x, y;
	unsigned short colour = 0;
 3e0:	e3a03000 	mov	r3, #0
 3e4:	e14b30be 	strh	r3, [r11, #-14]

	for(y = 0; y <= 239; y++)
 3e8:	e3a03000 	mov	r3, #0
 3ec:	e50b300c 	str	r3, [r11, #-12]
 3f0:	ea000015 	b	44c <test_pixel+0x78>
	{
		for(x = 0; x <= 319; x++) VGA_draw_point_ASM(x, y, colour++);
 3f4:	e3a03000 	mov	r3, #0
 3f8:	e50b3008 	str	r3, [r11, #-8]
 3fc:	ea00000b 	b	430 <test_pixel+0x5c>
 400:	e15b30be 	ldrh	r3, [r11, #-14]
 404:	e15b20be 	ldrh	r2, [r11, #-14]
 408:	e2822001 	add	r2, r2, #1
 40c:	e14b20be 	strh	r2, [r11, #-14]
 410:	e6bf3073 	sxth	r3, r3
 414:	e51b0008 	ldr	r0, [r11, #-8]
 418:	e51b100c 	ldr	r1, [r11, #-12]
 41c:	e1a02003 	mov	r2, r3
 420:	eb000083 	bl	634 <VGA_draw_point_ASM>
 424:	e51b3008 	ldr	r3, [r11, #-8]
 428:	e2833001 	add	r3, r3, #1
 42c:	e50b3008 	str	r3, [r11, #-8]
 430:	e51b2008 	ldr	r2, [r11, #-8]
 434:	e300313f 	movw	r3, #319	; 0x13f
 438:	e1520003 	cmp	r2, r3
 43c:	daffffef 	ble	400 <test_pixel+0x2c>
void test_pixel()
{
	int x, y;
	unsigned short colour = 0;

	for(y = 0; y <= 239; y++)
 440:	e51b300c 	ldr	r3, [r11, #-12]
 444:	e2833001 	add	r3, r3, #1
 448:	e50b300c 	str	r3, [r11, #-12]
 44c:	e51b300c 	ldr	r3, [r11, #-12]
 450:	e35300ef 	cmp	r3, #239	; 0xef
 454:	daffffe6 	ble	3f4 <test_pixel+0x20>
	{
		for(x = 0; x <= 319; x++) VGA_draw_point_ASM(x, y, colour++);
	}
}
 458:	e24bd004 	sub	sp, r11, #4
 45c:	e8bd8800 	pop	{r11, pc}

00000460 <main>:

void main()
{
 460:	e92d4800 	push	{r11, lr}
 464:	e28db004 	add	r11, sp, #4
 468:	e24dd018 	sub	sp, sp, #24
 46c:	ea000000 	b	474 <main+0x14>
		test_byte();
		else if(pb0) test_char();
		else if(pb1) test_pixel();
		else if(pb3) VGA_clear_charbuff_ASM();
		else if(pb4) VGA_clear_pixelbuff_ASM();
	}
 470:	e1a00000 	nop			; (mov r0, r0)
void main()
{

	while(1)
	{
		int pb0 = PB_data_is_pressed_ASM(PB0);
 474:	e3a00001 	mov	r0, #1
 478:	eb00002c 	bl	530 <PB_data_is_pressed_ASM>
 47c:	e50b0008 	str	r0, [r11, #-8]
		int pb1 = PB_data_is_pressed_ASM(PB1);
 480:	e3a00002 	mov	r0, #2
 484:	eb000029 	bl	530 <PB_data_is_pressed_ASM>
 488:	e50b000c 	str	r0, [r11, #-12]
		int pb3 = PB_data_is_pressed_ASM(PB2);
 48c:	e3a00004 	mov	r0, #4
 490:	eb000026 	bl	530 <PB_data_is_pressed_ASM>
 494:	e50b0010 	str	r0, [r11, #-16]
		int pb4 = PB_data_is_pressed_ASM(PB3);
 498:	e3a00008 	mov	r0, #8
 49c:	eb000023 	bl	530 <PB_data_is_pressed_ASM>
 4a0:	e50b0014 	str	r0, [r11, #-20]	; 0xffffffec
		int switches = read_slider_switches_ASM();
 4a4:	eb00004c 	bl	5dc <read_slider_switches_ASM>
 4a8:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8

		if(pb0 && switches) 
 4ac:	e51b3008 	ldr	r3, [r11, #-8]
 4b0:	e3530000 	cmp	r3, #0
 4b4:	0a000004 	beq	4cc <main+0x6c>
 4b8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 4bc:	e3530000 	cmp	r3, #0
 4c0:	0a000001 	beq	4cc <main+0x6c>
		test_byte();
 4c4:	ebffffa1 	bl	350 <test_byte>
		else if(pb0) test_char();
		else if(pb1) test_pixel();
		else if(pb3) VGA_clear_charbuff_ASM();
		else if(pb4) VGA_clear_pixelbuff_ASM();
	}
 4c8:	eaffffe8 	b	470 <main+0x10>
		int pb4 = PB_data_is_pressed_ASM(PB3);
		int switches = read_slider_switches_ASM();

		if(pb0 && switches) 
		test_byte();
		else if(pb0) test_char();
 4cc:	e51b3008 	ldr	r3, [r11, #-8]
 4d0:	e3530000 	cmp	r3, #0
 4d4:	0a000001 	beq	4e0 <main+0x80>
 4d8:	ebffff5f 	bl	25c <test_char>
		else if(pb1) test_pixel();
		else if(pb3) VGA_clear_charbuff_ASM();
		else if(pb4) VGA_clear_pixelbuff_ASM();
	}
 4dc:	eaffffe3 	b	470 <main+0x10>
		int switches = read_slider_switches_ASM();

		if(pb0 && switches) 
		test_byte();
		else if(pb0) test_char();
		else if(pb1) test_pixel();
 4e0:	e51b300c 	ldr	r3, [r11, #-12]
 4e4:	e3530000 	cmp	r3, #0
 4e8:	0a000001 	beq	4f4 <main+0x94>
 4ec:	ebffffb8 	bl	3d4 <test_pixel>
		else if(pb3) VGA_clear_charbuff_ASM();
		else if(pb4) VGA_clear_pixelbuff_ASM();
	}
 4f0:	eaffffde 	b	470 <main+0x10>

		if(pb0 && switches) 
		test_byte();
		else if(pb0) test_char();
		else if(pb1) test_pixel();
		else if(pb3) VGA_clear_charbuff_ASM();
 4f4:	e51b3010 	ldr	r3, [r11, #-16]
 4f8:	e3530000 	cmp	r3, #0
 4fc:	0a000001 	beq	508 <main+0xa8>
 500:	eb000059 	bl	66c <VGA_clear_charbuff_ASM>
		else if(pb4) VGA_clear_pixelbuff_ASM();
	}
 504:	eaffffd9 	b	470 <main+0x10>
		if(pb0 && switches) 
		test_byte();
		else if(pb0) test_char();
		else if(pb1) test_pixel();
		else if(pb3) VGA_clear_charbuff_ASM();
		else if(pb4) VGA_clear_pixelbuff_ASM();
 508:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 50c:	e3530000 	cmp	r3, #0
 510:	0affffd6 	beq	470 <main+0x10>
 514:	eb000036 	bl	5f4 <VGA_clear_pixelbuff_ASM>
	}
 518:	eaffffd4 	b	470 <main+0x10>

0000051c <read_PB_data_ASM>:

	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM

read_PB_data_ASM:
	PUSH {R1, LR}
 51c:	e92d4002 	push	{r1, lr}
	LDR R1, =BT_DATA
 520:	e59f10a8 	ldr	r1, [pc, #168]	; 5d0 <disable_PB_INT_ASM+0x20>
	LDR R0, [R1]
 524:	e5910000 	ldr	r0, [r1]
	POP {R1, LR}
 528:	e8bd4002 	pop	{r1, lr}
	BX LR
 52c:	e12fff1e 	bx	lr

00000530 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
	PUSH {R1, LR}
 530:	e92d4002 	push	{r1, lr}
	MOV R1, R0
 534:	e1a01000 	mov	r1, r0
	BL read_PB_data_ASM
 538:	ebfffff7 	bl	51c <read_PB_data_ASM>
	AND R0, R0, R1
 53c:	e0000001 	and	r0, r0, r1
	POP {R1, LR}
 540:	e8bd4002 	pop	{r1, lr}
	BX LR
 544:	e12fff1e 	bx	lr

00000548 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
	PUSH {R1, LR}
 548:	e92d4002 	push	{r1, lr}
	LDR R1, =EDGE_CAP
 54c:	e59f1080 	ldr	r1, [pc, #128]	; 5d4 <disable_PB_INT_ASM+0x24>
	LDR R0, [R1]
 550:	e5910000 	ldr	r0, [r1]
	POP {R1, LR}
 554:	e8bd4002 	pop	{r1, lr}
	BX LR
 558:	e12fff1e 	bx	lr

0000055c <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
	PUSH {R1, LR}
 55c:	e92d4002 	push	{r1, lr}
	MOV R1, R0
 560:	e1a01000 	mov	r1, r0
	BL read_PB_edgecap_ASM
 564:	ebfffff7 	bl	548 <read_PB_edgecap_ASM>
	AND R0, R0, R1
 568:	e0000001 	and	r0, r0, r1
	POP {R1, LR}
 56c:	e8bd4002 	pop	{r1, lr}
	BX LR
 570:	e12fff1e 	bx	lr

00000574 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
	PUSH {LR, R1, R3}
 574:	e92d400a 	push	{r1, r3, lr}
	LDR R3, =EDGE_CAP
 578:	e59f3054 	ldr	r3, [pc, #84]	; 5d4 <disable_PB_INT_ASM+0x24>
	MVN R1, R0
 57c:	e1e01000 	mvn	r1, r0
	BL read_PB_edgecap_ASM
 580:	ebfffff0 	bl	548 <read_PB_edgecap_ASM>
	AND R0, R1, R0
 584:	e0010000 	and	r0, r1, r0
	STR R0, [R3]
 588:	e5830000 	str	r0, [r3]
	POP {LR, R1, R3}
 58c:	e8bd400a 	pop	{r1, r3, lr}
	BX LR
 590:	e12fff1e 	bx	lr

00000594 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
	// Need to set a bit location (not specified) in this
	// register to be 1, register location is INRPT_MASK
	// there are 3 bits in mask and 4 buttons 
	PUSH {R1, LR}
 594:	e92d4002 	push	{r1, lr}
	LDR R1, =INRPT_MASK
 598:	e59f1038 	ldr	r1, [pc, #56]	; 5d8 <disable_PB_INT_ASM+0x28>
	LDR R2, [R1]
 59c:	e5912000 	ldr	r2, [r1]
	ORR R0, R0, R2
 5a0:	e1800002 	orr	r0, r0, r2
	STR R0, [R1]
 5a4:	e5810000 	str	r0, [r1]
	POP {R1, LR}
 5a8:	e8bd4002 	pop	{r1, lr}
	BX LR
 5ac:	e12fff1e 	bx	lr

000005b0 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
	// Need to set a bit location (not specified) in this 
	// register to be 0, register location is INRPT_MASK
	PUSH {R1, LR}
 5b0:	e92d4002 	push	{r1, lr}
	LDR R1, =INRPT_MASK
 5b4:	e59f101c 	ldr	r1, [pc, #28]	; 5d8 <disable_PB_INT_ASM+0x28>
	LDR R2, [R1]
 5b8:	e5912000 	ldr	r2, [r1]
	MVN R0, R0
 5bc:	e1e00000 	mvn	r0, r0
	AND R0, R0, R2
 5c0:	e0000002 	and	r0, r0, r2
	STR R0, [R1]
 5c4:	e5810000 	str	r0, [r1]
	POP {R1, LR}
 5c8:	e8bd4002 	pop	{r1, lr}
	BX LR
 5cc:	e12fff1e 	bx	lr
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM

read_PB_data_ASM:
	PUSH {R1, LR}
	LDR R1, =BT_DATA
 5d0:	ff200050 	.word	0xff200050
	POP {R1, LR}
	BX LR

read_PB_edgecap_ASM:
	PUSH {R1, LR}
	LDR R1, =EDGE_CAP
 5d4:	1000005c 	.word	0x1000005c
enable_PB_INT_ASM:
	// Need to set a bit location (not specified) in this
	// register to be 1, register location is INRPT_MASK
	// there are 3 bits in mask and 4 buttons 
	PUSH {R1, LR}
	LDR R1, =INRPT_MASK
 5d8:	ff200058 	.word	0xff200058

000005dc <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	PUSH {R1} 
 5dc:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =SW_BASE
 5e0:	e59f1008 	ldr	r1, [pc, #8]	; 5f0 <read_slider_switches_ASM+0x14>
	LDR R0, [R1]
 5e4:	e5910000 	ldr	r0, [r1]
	POP {R1}
 5e8:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 5ec:	e12fff1e 	bx	lr
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	PUSH {R1} 
	LDR R1, =SW_BASE
 5f0:	ff200040 	.word	0xff200040

000005f4 <VGA_clear_pixelbuff_ASM>:
	.global VGA_write_char_ASM
	.global VGA_write_byte_ASM
	.global VGA_draw_point_ASM
		
VGA_clear_pixelbuff_ASM:
	PUSH {R4-R5}	
 5f4:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 5f8:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_PIXEL_BUF_BASE
 5fc:	e3a03332 	mov	r3, #-939524096	; 0xc8000000

	MOV R0, #0
 600:	e3a00000 	mov	r0, #0

00000604 <PIXEL_LOOPX>:
PIXEL_LOOPX:
	MOV R1, #0
 604:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0, LSL #1
 608:	e0834080 	add	r4, r3, r0, lsl #1

0000060c <PIXEL_LOOPY>:
PIXEL_LOOPY:
	ADD R5, R4, R1, LSL #10
 60c:	e0845501 	add	r5, r4, r1, lsl #10
	
	STRH R2, [R5]
 610:	e1c520b0 	strh	r2, [r5]
	
	ADD R1, R1, #1
 614:	e2811001 	add	r1, r1, #1
	CMP R1, #240
 618:	e35100f0 	cmp	r1, #240	; 0xf0
	BLT PIXEL_LOOPY
 61c:	bafffffa 	blt	60c <PIXEL_LOOPY>
	
	ADD R0, R0, #1
 620:	e2800001 	add	r0, r0, #1
	CMP R0, #320
 624:	e3500d05 	cmp	r0, #320	; 0x140
	BLT PIXEL_LOOPX
 628:	bafffff5 	blt	604 <PIXEL_LOOPX>

	POP {R4-R5}
 62c:	e8bd0030 	pop	{r4, r5}
	BX LR
 630:	e12fff1e 	bx	lr

00000634 <VGA_draw_point_ASM>:

VGA_draw_point_ASM:
	LDR R3, =319
 634:	e59f30fc 	ldr	r3, [pc, #252]	; 738 <HEX_ASCII+0x10>
	CMP R0, #0
 638:	e3500000 	cmp	r0, #0
	BXLT LR
 63c:	b12fff1e 	bxlt	lr
	CMP R1, #0
 640:	e3510000 	cmp	r1, #0
	BXLT LR
 644:	b12fff1e 	bxlt	lr
	CMP R0, R3
 648:	e1500003 	cmp	r0, r3
	BXGT LR
 64c:	c12fff1e 	bxgt	lr
	CMP R1, #239
 650:	e35100ef 	cmp	r1, #239	; 0xef
	BXGT LR
 654:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_PIXEL_BUF_BASE
 658:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	ADD R3, R3, R0, LSL #1
 65c:	e0833080 	add	r3, r3, r0, lsl #1
	ADD R3, R3, R1, LSL #10
 660:	e0833501 	add	r3, r3, r1, lsl #10
	STRH R2, [R3]
 664:	e1c320b0 	strh	r2, [r3]
	BX LR
 668:	e12fff1e 	bx	lr

0000066c <VGA_clear_charbuff_ASM>:
	
VGA_clear_charbuff_ASM:
	PUSH {R4-R5}	
 66c:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 670:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_CHAR_BUF_BASE
 674:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000

	MOV R0, #0
 678:	e3a00000 	mov	r0, #0

0000067c <CHAR_LOOPX>:
CHAR_LOOPX:
	MOV R1, #0
 67c:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0
 680:	e0834000 	add	r4, r3, r0

00000684 <CHAR_LOOPY>:
CHAR_LOOPY:
	ADD R5, R4, R1, LSL #7
 684:	e0845381 	add	r5, r4, r1, lsl #7
	
	STRB R2, [R5]
 688:	e5c52000 	strb	r2, [r5]
	
	ADD R1, R1, #1
 68c:	e2811001 	add	r1, r1, #1
	CMP R1, #60
 690:	e351003c 	cmp	r1, #60	; 0x3c
	BLT CHAR_LOOPY
 694:	bafffffa 	blt	684 <CHAR_LOOPY>
	
	ADD R0, R0, #1
 698:	e2800001 	add	r0, r0, #1
	CMP R0, #80
 69c:	e3500050 	cmp	r0, #80	; 0x50
	BLT CHAR_LOOPX
 6a0:	bafffff5 	blt	67c <CHAR_LOOPX>

	POP {R4-R5}
 6a4:	e8bd0030 	pop	{r4, r5}
	BX LR
 6a8:	e12fff1e 	bx	lr

000006ac <VGA_write_char_ASM>:

VGA_write_char_ASM:
	CMP R0, #0
 6ac:	e3500000 	cmp	r0, #0
	BXLT LR
 6b0:	b12fff1e 	bxlt	lr
	CMP R1, #0
 6b4:	e3510000 	cmp	r1, #0
	BXLT LR
 6b8:	b12fff1e 	bxlt	lr
	CMP R0, #80
 6bc:	e3500050 	cmp	r0, #80	; 0x50
	BXGE LR
 6c0:	a12fff1e 	bxge	lr
	CMP R1, #60
 6c4:	e351003c 	cmp	r1, #60	; 0x3c
	BXGE LR
 6c8:	a12fff1e 	bxge	lr
	
	LDR R3, =VGA_CHAR_BUF_BASE
 6cc:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	ADD R3, R3, R0
 6d0:	e0833000 	add	r3, r3, r0
	ADD R3, R3, R1, LSL #7
 6d4:	e0833381 	add	r3, r3, r1, lsl #7
	STRB R2, [R3]
 6d8:	e5c32000 	strb	r2, [r3]
	BX LR
 6dc:	e12fff1e 	bx	lr

000006e0 <VGA_write_byte_ASM>:
	// R5 = HEX_ASCII
	// R0 = x
	// R1 = y
	// R2 = character
VGA_write_byte_ASM:
	PUSH {LR, R1-R9}
 6e0:	e92d43fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	MOV R4, R2
 6e4:	e1a04002 	mov	r4, r2
	LSR R4, R4, #4
 6e8:	e1a04224 	lsr	r4, r4, #4
	LDR R5, =HEX_ASCII
 6ec:	e59f5048 	ldr	r5, [pc, #72]	; 73c <HEX_ASCII+0x14>

	PUSH {R2}
 6f0:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
	LSR R2, R2, #4
 6f4:	e1a02222 	lsr	r2, r2, #4
	LDRB R2, [R5, R2]
 6f8:	e7d52002 	ldrb	r2, [r5, r2]
	BL VGA_write_char_ASM
 6fc:	ebffffea 	bl	6ac <VGA_write_char_ASM>
	POP {R2}
 700:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
	ADD R0, R0, #1
 704:	e2800001 	add	r0, r0, #1
	
	AND R2, R2, #15
 708:	e202200f 	and	r2, r2, #15
	LDRB R2, [R5, R2]
 70c:	e7d52002 	ldrb	r2, [r5, r2]
	BL VGA_write_char_ASM
 710:	ebffffe5 	bl	6ac <VGA_write_char_ASM>
	ADD R0, R0, #1
 714:	e2800001 	add	r0, r0, #1

	MOV R2, #32
 718:	e3a02020 	mov	r2, #32
	BL VGA_write_char_ASM
 71c:	ebffffe2 	bl	6ac <VGA_write_char_ASM>

	POP {LR, R1-R9}
 720:	e8bd43fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	BX LR
 724:	e12fff1e 	bx	lr

00000728 <HEX_ASCII>:
 728:	33323130 	.word	0x33323130
 72c:	37363534 	.word	0x37363534
 730:	42413938 	.word	0x42413938
 734:	46454443 	.word	0x46454443

	POP {R4-R5}
	BX LR

VGA_draw_point_ASM:
	LDR R3, =319
 738:	0000013f 	.word	0x0000013f
	// R2 = character
VGA_write_byte_ASM:
	PUSH {LR, R1-R9}
	MOV R4, R2
	LSR R4, R4, #4
	LDR R5, =HEX_ASCII
 73c:	00000728 	.word	0x00000728

00000740 <atexit>:
 740:	e1a01000 	mov	r1, r0
 744:	e3a00000 	mov	r0, #0
 748:	e92d4008 	push	{r3, lr}
 74c:	e1a02000 	mov	r2, r0
 750:	e1a03000 	mov	r3, r0
 754:	eb00000e 	bl	794 <__register_exitproc>
 758:	e8bd4008 	pop	{r3, lr}
 75c:	e12fff1e 	bx	lr

00000760 <exit>:
 760:	e92d4008 	push	{r3, lr}
 764:	e3a01000 	mov	r1, #0
 768:	e1a04000 	mov	r4, r0
 76c:	eb000045 	bl	888 <__call_exitprocs>
 770:	e59f3018 	ldr	r3, [pc, #24]	; 790 <exit+0x30>
 774:	e5930000 	ldr	r0, [r3]
 778:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 77c:	e3530000 	cmp	r3, #0
 780:	11a0e00f 	movne	lr, pc
 784:	112fff13 	bxne	r3
 788:	e1a00004 	mov	r0, r4
 78c:	eb0000c9 	bl	ab8 <_exit>
 790:	00000b78 	.word	0x00000b78

00000794 <__register_exitproc>:
 794:	e59fc0e4 	ldr	r12, [pc, #228]	; 880 <__register_exitproc+0xec>
 798:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 79c:	e59c4000 	ldr	r4, [r12]
 7a0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 7a4:	e35c0000 	cmp	r12, #0
 7a8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 7ac:	e59c5004 	ldr	r5, [r12, #4]
 7b0:	0584c148 	streq	r12, [r4, #328]	; 0x148
 7b4:	e355001f 	cmp	r5, #31
 7b8:	e24dd010 	sub	sp, sp, #16
 7bc:	e1a06000 	mov	r6, r0
 7c0:	da000015 	ble	81c <__register_exitproc+0x88>
 7c4:	e59f00b8 	ldr	r0, [pc, #184]	; 884 <__register_exitproc+0xf0>
 7c8:	e3500000 	cmp	r0, #0
 7cc:	1a000001 	bne	7d8 <__register_exitproc+0x44>
 7d0:	e3e00000 	mvn	r0, #0
 7d4:	ea000018 	b	83c <__register_exitproc+0xa8>
 7d8:	e3a00e19 	mov	r0, #400	; 0x190
 7dc:	e58d100c 	str	r1, [sp, #12]
 7e0:	e58d2008 	str	r2, [sp, #8]
 7e4:	e58d3004 	str	r3, [sp, #4]
 7e8:	e320f000 	nop	{0}
 7ec:	e250c000 	subs	r12, r0, #0
 7f0:	e59d100c 	ldr	r1, [sp, #12]
 7f4:	e59d2008 	ldr	r2, [sp, #8]
 7f8:	e59d3004 	ldr	r3, [sp, #4]
 7fc:	0afffff3 	beq	7d0 <__register_exitproc+0x3c>
 800:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 804:	e3a00000 	mov	r0, #0
 808:	e58c0004 	str	r0, [r12, #4]
 80c:	e58c5000 	str	r5, [r12]
 810:	e584c148 	str	r12, [r4, #328]	; 0x148
 814:	e58c0188 	str	r0, [r12, #392]	; 0x188
 818:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 81c:	e3560000 	cmp	r6, #0
 820:	e59c4004 	ldr	r4, [r12, #4]
 824:	1a000007 	bne	848 <__register_exitproc+0xb4>
 828:	e2843002 	add	r3, r4, #2
 82c:	e2844001 	add	r4, r4, #1
 830:	e78c1103 	str	r1, [r12, r3, lsl #2]
 834:	e58c4004 	str	r4, [r12, #4]
 838:	e3a00000 	mov	r0, #0
 83c:	e28dd010 	add	sp, sp, #16
 840:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 844:	e12fff1e 	bx	lr
 848:	e3a00001 	mov	r0, #1
 84c:	e1a00410 	lsl	r0, r0, r4
 850:	e08c8104 	add	r8, r12, r4, lsl #2
 854:	e3560002 	cmp	r6, #2
 858:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 85c:	e5883108 	str	r3, [r8, #264]	; 0x108
 860:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 864:	e1877000 	orr	r7, r7, r0
 868:	01830000 	orreq	r0, r3, r0
 86c:	e1a05008 	mov	r5, r8
 870:	e5882088 	str	r2, [r8, #136]	; 0x88
 874:	e58c7188 	str	r7, [r12, #392]	; 0x188
 878:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 87c:	eaffffe9 	b	828 <__register_exitproc+0x94>
 880:	00000b78 	.word	0x00000b78
 884:	00000000 	.word	0x00000000

00000888 <__call_exitprocs>:
 888:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 88c:	e59f3168 	ldr	r3, [pc, #360]	; 9fc <__call_exitprocs+0x174>
 890:	e5933000 	ldr	r3, [r3]
 894:	e24dd014 	sub	sp, sp, #20
 898:	e58d3004 	str	r3, [sp, #4]
 89c:	e2833f52 	add	r3, r3, #328	; 0x148
 8a0:	e58d0008 	str	r0, [sp, #8]
 8a4:	e58d300c 	str	r3, [sp, #12]
 8a8:	e1a07001 	mov	r7, r1
 8ac:	e3a08001 	mov	r8, #1
 8b0:	e59d3004 	ldr	r3, [sp, #4]
 8b4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 8b8:	e3560000 	cmp	r6, #0
 8bc:	e59db00c 	ldr	r11, [sp, #12]
 8c0:	0a000033 	beq	994 <__call_exitprocs+0x10c>
 8c4:	e5965004 	ldr	r5, [r6, #4]
 8c8:	e2554001 	subs	r4, r5, #1
 8cc:	5286a088 	addpl	r10, r6, #136	; 0x88
 8d0:	5285501f 	addpl	r5, r5, #31
 8d4:	508a5105 	addpl	r5, r10, r5, lsl #2
 8d8:	5a000007 	bpl	8fc <__call_exitprocs+0x74>
 8dc:	ea000029 	b	988 <__call_exitprocs+0x100>
 8e0:	e5953000 	ldr	r3, [r5]
 8e4:	e1530007 	cmp	r3, r7
 8e8:	0a000005 	beq	904 <__call_exitprocs+0x7c>
 8ec:	e2444001 	sub	r4, r4, #1
 8f0:	e3740001 	cmn	r4, #1
 8f4:	e2455004 	sub	r5, r5, #4
 8f8:	0a000022 	beq	988 <__call_exitprocs+0x100>
 8fc:	e3570000 	cmp	r7, #0
 900:	1afffff6 	bne	8e0 <__call_exitprocs+0x58>
 904:	e5963004 	ldr	r3, [r6, #4]
 908:	e06a2005 	rsb	r2, r10, r5
 90c:	e2433001 	sub	r3, r3, #1
 910:	e0862002 	add	r2, r6, r2
 914:	e1530004 	cmp	r3, r4
 918:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 91c:	13a01000 	movne	r1, #0
 920:	05864004 	streq	r4, [r6, #4]
 924:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 928:	e3530000 	cmp	r3, #0
 92c:	0affffee 	beq	8ec <__call_exitprocs+0x64>
 930:	e1a02418 	lsl	r2, r8, r4
 934:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 938:	e1120001 	tst	r2, r1
 93c:	e5969004 	ldr	r9, [r6, #4]
 940:	0a000016 	beq	9a0 <__call_exitprocs+0x118>
 944:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 948:	e1120001 	tst	r2, r1
 94c:	1a000016 	bne	9ac <__call_exitprocs+0x124>
 950:	e59d0008 	ldr	r0, [sp, #8]
 954:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 958:	e1a0e00f 	mov	lr, pc
 95c:	e12fff13 	bx	r3
 960:	e5963004 	ldr	r3, [r6, #4]
 964:	e1530009 	cmp	r3, r9
 968:	1affffd0 	bne	8b0 <__call_exitprocs+0x28>
 96c:	e59b3000 	ldr	r3, [r11]
 970:	e1530006 	cmp	r3, r6
 974:	1affffcd 	bne	8b0 <__call_exitprocs+0x28>
 978:	e2444001 	sub	r4, r4, #1
 97c:	e3740001 	cmn	r4, #1
 980:	e2455004 	sub	r5, r5, #4
 984:	1affffdc 	bne	8fc <__call_exitprocs+0x74>
 988:	e59f1070 	ldr	r1, [pc, #112]	; a00 <__call_exitprocs+0x178>
 98c:	e3510000 	cmp	r1, #0
 990:	1a000009 	bne	9bc <__call_exitprocs+0x134>
 994:	e28dd014 	add	sp, sp, #20
 998:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 99c:	e12fff1e 	bx	lr
 9a0:	e1a0e00f 	mov	lr, pc
 9a4:	e12fff13 	bx	r3
 9a8:	eaffffec 	b	960 <__call_exitprocs+0xd8>
 9ac:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 9b0:	e1a0e00f 	mov	lr, pc
 9b4:	e12fff13 	bx	r3
 9b8:	eaffffe8 	b	960 <__call_exitprocs+0xd8>
 9bc:	e5963004 	ldr	r3, [r6, #4]
 9c0:	e3530000 	cmp	r3, #0
 9c4:	e5963000 	ldr	r3, [r6]
 9c8:	1a000008 	bne	9f0 <__call_exitprocs+0x168>
 9cc:	e3530000 	cmp	r3, #0
 9d0:	0a000006 	beq	9f0 <__call_exitprocs+0x168>
 9d4:	e1a00006 	mov	r0, r6
 9d8:	e58b3000 	str	r3, [r11]
 9dc:	e320f000 	nop	{0}
 9e0:	e59b6000 	ldr	r6, [r11]
 9e4:	e3560000 	cmp	r6, #0
 9e8:	1affffb5 	bne	8c4 <__call_exitprocs+0x3c>
 9ec:	eaffffe8 	b	994 <__call_exitprocs+0x10c>
 9f0:	e1a0b006 	mov	r11, r6
 9f4:	e1a06003 	mov	r6, r3
 9f8:	eafffff9 	b	9e4 <__call_exitprocs+0x15c>
 9fc:	00000b78 	.word	0x00000b78
 a00:	00000000 	.word	0x00000000

00000a04 <register_fini>:
 a04:	e92d4008 	push	{r3, lr}
 a08:	e59f3010 	ldr	r3, [pc, #16]	; a20 <register_fini+0x1c>
 a0c:	e3530000 	cmp	r3, #0
 a10:	159f000c 	ldrne	r0, [pc, #12]	; a24 <register_fini+0x20>
 a14:	1bffff49 	blne	740 <atexit>
 a18:	e8bd4008 	pop	{r3, lr}
 a1c:	e12fff1e 	bx	lr
 a20:	00000ba0 	.word	0x00000ba0
 a24:	00000a28 	.word	0x00000a28

00000a28 <__libc_fini_array>:
 a28:	e92d4038 	push	{r3, r4, r5, lr}
 a2c:	e59f5030 	ldr	r5, [pc, #48]	; a64 <__libc_fini_array+0x3c>
 a30:	e59f4030 	ldr	r4, [pc, #48]	; a68 <__libc_fini_array+0x40>
 a34:	e0654004 	rsb	r4, r5, r4
 a38:	e1b04144 	asrs	r4, r4, #2
 a3c:	10855104 	addne	r5, r5, r4, lsl #2
 a40:	0a000004 	beq	a58 <__libc_fini_array+0x30>
 a44:	e5353004 	ldr	r3, [r5, #-4]!
 a48:	e1a0e00f 	mov	lr, pc
 a4c:	e12fff13 	bx	r3
 a50:	e2544001 	subs	r4, r4, #1
 a54:	1afffffa 	bne	a44 <__libc_fini_array+0x1c>
 a58:	eb000050 	bl	ba0 <__libc_fini>
 a5c:	e8bd4038 	pop	{r3, r4, r5, lr}
 a60:	e12fff1e 	bx	lr
 a64:	00000bb8 	.word	0x00000bb8
 a68:	00000bbc 	.word	0x00000bbc

00000a6c <__cs3_premain>:
 a6c:	e92d4008 	push	{r3, lr}
 a70:	eb00001d 	bl	aec <__libc_init_array>
 a74:	e59f3030 	ldr	r3, [pc, #48]	; aac <__cs3_premain+0x40>
 a78:	e3530000 	cmp	r3, #0
 a7c:	15930000 	ldrne	r0, [r3]
 a80:	01a00003 	moveq	r0, r3
 a84:	e59f3024 	ldr	r3, [pc, #36]	; ab0 <__cs3_premain+0x44>
 a88:	e3530000 	cmp	r3, #0
 a8c:	15931000 	ldrne	r1, [r3]
 a90:	01a01003 	moveq	r1, r3
 a94:	e3a02000 	mov	r2, #0
 a98:	ebfffe70 	bl	460 <main>
 a9c:	e59f3010 	ldr	r3, [pc, #16]	; ab4 <__cs3_premain+0x48>
 aa0:	e3530000 	cmp	r3, #0
 aa4:	1bffff2d 	blne	760 <exit>
 aa8:	eafffffe 	b	aa8 <__cs3_premain+0x3c>
	...
 ab4:	00000760 	.word	0x00000760

00000ab8 <_exit>:
 ab8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 abc:	e3a00018 	mov	r0, #24
 ac0:	e59f1004 	ldr	r1, [pc, #4]	; acc <_exit+0x14>
 ac4:	ef123456 	svc	0x00123456
 ac8:	eafffffe 	b	ac8 <_exit+0x10>
 acc:	00020026 	.word	0x00020026

00000ad0 <__cs3_isr_interrupt>:
 ad0:	eafffffe 	b	ad0 <__cs3_isr_interrupt>

00000ad4 <__cs3_isr_undef>:
 ad4:	eafffffe 	b	ad4 <__cs3_isr_undef>

00000ad8 <__cs3_isr_swi>:
 ad8:	eafffffe 	b	ad8 <__cs3_isr_swi>

00000adc <__cs3_isr_pabort>:
 adc:	eafffffe 	b	adc <__cs3_isr_pabort>

00000ae0 <__cs3_isr_dabort>:
 ae0:	eafffffe 	b	ae0 <__cs3_isr_dabort>

00000ae4 <__cs3_isr_irq>:
 ae4:	eafffffe 	b	ae4 <__cs3_isr_irq>

00000ae8 <__cs3_isr_fiq>:
 ae8:	eafffffe 	b	ae8 <__cs3_isr_fiq>

00000aec <__libc_init_array>:
 aec:	e92d4070 	push	{r4, r5, r6, lr}
 af0:	e59f506c 	ldr	r5, [pc, #108]	; b64 <__libc_init_array+0x78>
 af4:	e59f606c 	ldr	r6, [pc, #108]	; b68 <__libc_init_array+0x7c>
 af8:	e0656006 	rsb	r6, r5, r6
 afc:	e1b06146 	asrs	r6, r6, #2
 b00:	12455004 	subne	r5, r5, #4
 b04:	13a04000 	movne	r4, #0
 b08:	0a000005 	beq	b24 <__libc_init_array+0x38>
 b0c:	e5b53004 	ldr	r3, [r5, #4]!
 b10:	e2844001 	add	r4, r4, #1
 b14:	e1a0e00f 	mov	lr, pc
 b18:	e12fff13 	bx	r3
 b1c:	e1560004 	cmp	r6, r4
 b20:	1afffff9 	bne	b0c <__libc_init_array+0x20>
 b24:	e59f5040 	ldr	r5, [pc, #64]	; b6c <__libc_init_array+0x80>
 b28:	e59f6040 	ldr	r6, [pc, #64]	; b70 <__libc_init_array+0x84>
 b2c:	e0656006 	rsb	r6, r5, r6
 b30:	eb000012 	bl	b80 <_init>
 b34:	e1b06146 	asrs	r6, r6, #2
 b38:	12455004 	subne	r5, r5, #4
 b3c:	13a04000 	movne	r4, #0
 b40:	0a000005 	beq	b5c <__libc_init_array+0x70>
 b44:	e5b53004 	ldr	r3, [r5, #4]!
 b48:	e2844001 	add	r4, r4, #1
 b4c:	e1a0e00f 	mov	lr, pc
 b50:	e12fff13 	bx	r3
 b54:	e1560004 	cmp	r6, r4
 b58:	1afffff9 	bne	b44 <__libc_init_array+0x58>
 b5c:	e8bd4070 	pop	{r4, r5, r6, lr}
 b60:	e12fff1e 	bx	lr
 b64:	00000b98 	.word	0x00000b98
 b68:	00000b98 	.word	0x00000b98
 b6c:	00000b98 	.word	0x00000b98
 b70:	00000ba0 	.word	0x00000ba0

Disassembly of section .rodata:

00000b78 <_global_impure_ptr>:
 b78:	00000be0 00000043                       ....C...

00000b80 <_init>:
 b80:	e1a0c00d 	mov	r12, sp
 b84:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b88:	e24cb004 	sub	r11, r12, #4
 b8c:	e24bd028 	sub	sp, r11, #40	; 0x28
 b90:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b94:	e12fff1e 	bx	lr

00000b98 <__init_array_start>:
 b98:	00000a04 	.word	0x00000a04

00000b9c <__frame_dummy_init_array_entry>:
 b9c:	00000208                                ....

00000ba0 <__libc_fini>:
 ba0:	e1a0c00d 	mov	r12, sp
 ba4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ba8:	e24cb004 	sub	r11, r12, #4
 bac:	e24bd028 	sub	sp, r11, #40	; 0x28
 bb0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 bb4:	e12fff1e 	bx	lr

00000bb8 <__fini_array_start>:
 bb8:	000001c4 	.word	0x000001c4

00000bbc <__cs3_regions>:
	...
 bc8:	00001010 	.word	0x00001010
 bcc:	00000020 	.word	0x00000020
